
STM32VL-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002430  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800279c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  20000070  0800280c  00020070  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000210  0800280c  00020210  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012d3b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002862  00000000  00000000  00032dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005faa  00000000  00000000  00035636  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000978  00000000  00000000  0003b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000be0  00000000  00000000  0003bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005760  00000000  00000000  0003cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003934  00000000  00000000  00042298  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045bcc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000215c  00000000  00000000  00045c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080025e8 	.word	0x080025e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080025e8 	.word	0x080025e8

08000210 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000212:	4604      	mov	r4, r0
 8000214:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000216:	2210      	movs	r2, #16
 8000218:	2100      	movs	r1, #0
 800021a:	a802      	add	r0, sp, #8
 800021c:	f001 fad8 	bl	80017d0 <memset>
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <BSP_LED_Init+0x5c>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000222:	699a      	ldr	r2, [r3, #24]
 8000224:	f042 0210 	orr.w	r2, r2, #16
 8000228:	619a      	str	r2, [r3, #24]
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0310 	and.w	r3, r3, #16
 8000230:	b9cc      	cbnz	r4, 8000266 <BSP_LED_Init+0x56>
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin    = LED_PIN[Led];
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <BSP_LED_Init+0x60>)
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull   = GPIO_NOPULL;
 8000238:	2700      	movs	r7, #0
  gpioinitstruct.Pin    = LED_PIN[Led];
 800023a:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8000242:	2303      	movs	r3, #3
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000244:	4d0b      	ldr	r5, [pc, #44]	; (8000274 <BSP_LED_Init+0x64>)
 8000246:	a902      	add	r1, sp, #8
 8000248:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800024c:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Pin    = LED_PIN[Led];
 800024e:	9602      	str	r6, [sp, #8]
  gpioinitstruct.Pull   = GPIO_NOPULL;
 8000250:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000252:	f000 f8f9 	bl	8000448 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000256:	463a      	mov	r2, r7
 8000258:	4631      	mov	r1, r6
 800025a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800025e:	f000 f9d9 	bl	8000614 <HAL_GPIO_WritePin>
}
 8000262:	b007      	add	sp, #28
 8000264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	e7e4      	b.n	8000236 <BSP_LED_Init+0x26>
 800026c:	40021000 	.word	0x40021000
 8000270:	08002620 	.word	0x08002620
 8000274:	20000000 	.word	0x20000000

08000278 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <BSP_LED_On+0x14>)
 800027a:	2201      	movs	r2, #1
 800027c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <BSP_LED_On+0x18>)
 8000282:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000286:	f000 b9c5 	b.w	8000614 <HAL_GPIO_WritePin>
 800028a:	bf00      	nop
 800028c:	08002620 	.word	0x08002620
 8000290:	20000000 	.word	0x20000000

08000294 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <BSP_LED_Toggle+0x10>)
 8000296:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800029a:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <BSP_LED_Toggle+0x14>)
 800029c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002a0:	f000 b9bd 	b.w	800061e <HAL_GPIO_TogglePin>
 80002a4:	08002620 	.word	0x08002620
 80002a8:	20000000 	.word	0x20000000

080002ac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <SystemInit+0x44>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	f042 0201 	orr.w	r2, r2, #1
 80002b4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002b6:	6859      	ldr	r1, [r3, #4]
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <SystemInit+0x48>)
 80002ba:	400a      	ands	r2, r1
 80002bc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80002c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80002d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80002da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002de:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80002e0:	2200      	movs	r2, #0
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <SystemInit+0x4c>)
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	f8ff0000 	.word	0xf8ff0000
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <HAL_MspInit>:
 80002fc:	4770      	bx	lr
	...

08000300 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <HAL_InitTick+0x24>)
{
 8000302:	b510      	push	{r4, lr}
 8000304:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000310:	f000 f884 	bl	800041c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000314:	2200      	movs	r2, #0
 8000316:	4621      	mov	r1, r4
 8000318:	f04f 30ff 	mov.w	r0, #4294967295
 800031c:	f000 f830 	bl	8000380 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000320:	2000      	movs	r0, #0
 8000322:	bd10      	pop	{r4, pc}
 8000324:	20000008 	.word	0x20000008

08000328 <HAL_Init>:
{
 8000328:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	2003      	movs	r0, #3
 800032c:	f000 f816 	bl	800035c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000330:	200f      	movs	r0, #15
 8000332:	f7ff ffe5 	bl	8000300 <HAL_InitTick>
  HAL_MspInit();
 8000336:	f7ff ffe1 	bl	80002fc <HAL_MspInit>
}
 800033a:	2000      	movs	r0, #0
 800033c:	bd08      	pop	{r3, pc}
	...

08000340 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000340:	4a02      	ldr	r2, [pc, #8]	; (800034c <HAL_IncTick+0xc>)
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	6013      	str	r3, [r2, #0]
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000188 	.word	0x20000188

08000350 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <HAL_GetTick+0x8>)
 8000352:	6818      	ldr	r0, [r3, #0]
}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000188 	.word	0x20000188

0800035c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800035c:	4a07      	ldr	r2, [pc, #28]	; (800037c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800035e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000360:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000362:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800036a:	041b      	lsls	r3, r3, #16
 800036c:	0c1b      	lsrs	r3, r3, #16
 800036e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000376:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000378:	60d3      	str	r3, [r2, #12]
 800037a:	4770      	bx	lr
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000382:	b530      	push	{r4, r5, lr}
 8000384:	68dc      	ldr	r4, [r3, #12]
 8000386:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800038a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000390:	2b04      	cmp	r3, #4
 8000392:	bf28      	it	cs
 8000394:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000396:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800039c:	bf98      	it	ls
 800039e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a0:	fa05 f303 	lsl.w	r3, r5, r3
 80003a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a8:	bf88      	it	hi
 80003aa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ac:	4019      	ands	r1, r3
 80003ae:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	fa05 f404 	lsl.w	r4, r5, r4
 80003b4:	3c01      	subs	r4, #1
 80003b6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80003b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ba:	ea42 0201 	orr.w	r2, r2, r1
 80003be:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	bfaf      	iteee	ge
 80003c4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c8:	4b06      	ldrlt	r3, [pc, #24]	; (80003e4 <HAL_NVIC_SetPriority+0x64>)
 80003ca:	f000 000f 	andlt.w	r0, r0, #15
 80003ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	bfa5      	ittet	ge
 80003d2:	b2d2      	uxtbge	r2, r2
 80003d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	e000ed00 	.word	0xe000ed00
 80003e4:	e000ed14 	.word	0xe000ed14

080003e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003e8:	2301      	movs	r3, #1
 80003ea:	0942      	lsrs	r2, r0, #5
 80003ec:	f000 001f 	and.w	r0, r0, #31
 80003f0:	fa03 f000 	lsl.w	r0, r3, r0
 80003f4:	4b01      	ldr	r3, [pc, #4]	; (80003fc <HAL_NVIC_EnableIRQ+0x14>)
 80003f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003fa:	4770      	bx	lr
 80003fc:	e000e100 	.word	0xe000e100

08000400 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000400:	2201      	movs	r2, #1
 8000402:	0943      	lsrs	r3, r0, #5
 8000404:	f000 001f 	and.w	r0, r0, #31
 8000408:	fa02 f000 	lsl.w	r0, r2, r0
 800040c:	4a02      	ldr	r2, [pc, #8]	; (8000418 <HAL_NVIC_DisableIRQ+0x18>)
 800040e:	3320      	adds	r3, #32
 8000410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000e100 	.word	0xe000e100

0800041c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800041c:	3801      	subs	r0, #1
 800041e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000422:	d20a      	bcs.n	800043a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000424:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800042a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000430:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000434:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800043a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000e010 	.word	0xe000e010
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800044c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800044e:	4616      	mov	r6, r2
 8000450:	4b65      	ldr	r3, [pc, #404]	; (80005e8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000452:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80005f8 <HAL_GPIO_Init+0x1b0>
 8000456:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80005fc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800045a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800045e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000460:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000464:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000468:	45a0      	cmp	r8, r4
 800046a:	d17f      	bne.n	800056c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800046c:	684d      	ldr	r5, [r1, #4]
 800046e:	2d12      	cmp	r5, #18
 8000470:	f000 80af 	beq.w	80005d2 <HAL_GPIO_Init+0x18a>
 8000474:	f200 8088 	bhi.w	8000588 <HAL_GPIO_Init+0x140>
 8000478:	2d02      	cmp	r5, #2
 800047a:	f000 80a7 	beq.w	80005cc <HAL_GPIO_Init+0x184>
 800047e:	d87c      	bhi.n	800057a <HAL_GPIO_Init+0x132>
 8000480:	2d00      	cmp	r5, #0
 8000482:	f000 808e 	beq.w	80005a2 <HAL_GPIO_Init+0x15a>
 8000486:	2d01      	cmp	r5, #1
 8000488:	f000 809e 	beq.w	80005c8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800048c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000490:	2cff      	cmp	r4, #255	; 0xff
 8000492:	bf93      	iteet	ls
 8000494:	4682      	movls	sl, r0
 8000496:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800049a:	3d08      	subhi	r5, #8
 800049c:	f8d0 b000 	ldrls.w	fp, [r0]
 80004a0:	bf92      	itee	ls
 80004a2:	00b5      	lslls	r5, r6, #2
 80004a4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80004a8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80004aa:	fa09 f805 	lsl.w	r8, r9, r5
 80004ae:	ea2b 0808 	bic.w	r8, fp, r8
 80004b2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004b6:	bf88      	it	hi
 80004b8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80004bc:	ea48 0505 	orr.w	r5, r8, r5
 80004c0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80004c4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80004c8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80004cc:	d04e      	beq.n	800056c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004ce:	4d47      	ldr	r5, [pc, #284]	; (80005ec <HAL_GPIO_Init+0x1a4>)
 80004d0:	4f46      	ldr	r7, [pc, #280]	; (80005ec <HAL_GPIO_Init+0x1a4>)
 80004d2:	69ad      	ldr	r5, [r5, #24]
 80004d4:	f026 0803 	bic.w	r8, r6, #3
 80004d8:	f045 0501 	orr.w	r5, r5, #1
 80004dc:	61bd      	str	r5, [r7, #24]
 80004de:	69bd      	ldr	r5, [r7, #24]
 80004e0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80004e4:	f005 0501 	and.w	r5, r5, #1
 80004e8:	9501      	str	r5, [sp, #4]
 80004ea:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004ee:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80004f8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004fc:	fa09 f90b 	lsl.w	r9, r9, fp
 8000500:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000504:	4d3a      	ldr	r5, [pc, #232]	; (80005f0 <HAL_GPIO_Init+0x1a8>)
 8000506:	42a8      	cmp	r0, r5
 8000508:	d068      	beq.n	80005dc <HAL_GPIO_Init+0x194>
 800050a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800050e:	42a8      	cmp	r0, r5
 8000510:	d066      	beq.n	80005e0 <HAL_GPIO_Init+0x198>
 8000512:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000516:	42a8      	cmp	r0, r5
 8000518:	d064      	beq.n	80005e4 <HAL_GPIO_Init+0x19c>
 800051a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800051e:	42a8      	cmp	r0, r5
 8000520:	bf0c      	ite	eq
 8000522:	2503      	moveq	r5, #3
 8000524:	2504      	movne	r5, #4
 8000526:	fa05 f50b 	lsl.w	r5, r5, fp
 800052a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800052e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000532:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000534:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000538:	bf14      	ite	ne
 800053a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800053c:	43a5      	biceq	r5, r4
 800053e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000540:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000542:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000546:	bf14      	ite	ne
 8000548:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800054a:	43a5      	biceq	r5, r4
 800054c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800054e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000550:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000554:	bf14      	ite	ne
 8000556:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000558:	43a5      	biceq	r5, r4
 800055a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800055c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800055e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000562:	bf14      	ite	ne
 8000564:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000566:	ea25 0404 	biceq.w	r4, r5, r4
 800056a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800056c:	3601      	adds	r6, #1
 800056e:	2e10      	cmp	r6, #16
 8000570:	f47f af73 	bne.w	800045a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000574:	b003      	add	sp, #12
 8000576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800057a:	2d03      	cmp	r5, #3
 800057c:	d022      	beq.n	80005c4 <HAL_GPIO_Init+0x17c>
 800057e:	2d11      	cmp	r5, #17
 8000580:	d184      	bne.n	800048c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000582:	68ca      	ldr	r2, [r1, #12]
 8000584:	3204      	adds	r2, #4
          break;
 8000586:	e781      	b.n	800048c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000588:	4f1a      	ldr	r7, [pc, #104]	; (80005f4 <HAL_GPIO_Init+0x1ac>)
 800058a:	42bd      	cmp	r5, r7
 800058c:	d009      	beq.n	80005a2 <HAL_GPIO_Init+0x15a>
 800058e:	d812      	bhi.n	80005b6 <HAL_GPIO_Init+0x16e>
 8000590:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000600 <HAL_GPIO_Init+0x1b8>
 8000594:	454d      	cmp	r5, r9
 8000596:	d004      	beq.n	80005a2 <HAL_GPIO_Init+0x15a>
 8000598:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800059c:	454d      	cmp	r5, r9
 800059e:	f47f af75 	bne.w	800048c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80005a2:	688a      	ldr	r2, [r1, #8]
 80005a4:	b1c2      	cbz	r2, 80005d8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80005a6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80005a8:	bf0c      	ite	eq
 80005aa:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80005ae:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005b2:	2208      	movs	r2, #8
 80005b4:	e76a      	b.n	800048c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80005b6:	4575      	cmp	r5, lr
 80005b8:	d0f3      	beq.n	80005a2 <HAL_GPIO_Init+0x15a>
 80005ba:	4565      	cmp	r5, ip
 80005bc:	d0f1      	beq.n	80005a2 <HAL_GPIO_Init+0x15a>
 80005be:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000604 <HAL_GPIO_Init+0x1bc>
 80005c2:	e7eb      	b.n	800059c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005c4:	2200      	movs	r2, #0
 80005c6:	e761      	b.n	800048c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005c8:	68ca      	ldr	r2, [r1, #12]
          break;
 80005ca:	e75f      	b.n	800048c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005cc:	68ca      	ldr	r2, [r1, #12]
 80005ce:	3208      	adds	r2, #8
          break;
 80005d0:	e75c      	b.n	800048c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005d2:	68ca      	ldr	r2, [r1, #12]
 80005d4:	320c      	adds	r2, #12
          break;
 80005d6:	e759      	b.n	800048c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005d8:	2204      	movs	r2, #4
 80005da:	e757      	b.n	800048c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005dc:	2500      	movs	r5, #0
 80005de:	e7a2      	b.n	8000526 <HAL_GPIO_Init+0xde>
 80005e0:	2501      	movs	r5, #1
 80005e2:	e7a0      	b.n	8000526 <HAL_GPIO_Init+0xde>
 80005e4:	2502      	movs	r5, #2
 80005e6:	e79e      	b.n	8000526 <HAL_GPIO_Init+0xde>
 80005e8:	40010400 	.word	0x40010400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800
 80005f4:	10210000 	.word	0x10210000
 80005f8:	10310000 	.word	0x10310000
 80005fc:	10320000 	.word	0x10320000
 8000600:	10110000 	.word	0x10110000
 8000604:	10220000 	.word	0x10220000

08000608 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000608:	6883      	ldr	r3, [r0, #8]
 800060a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800060c:	bf14      	ite	ne
 800060e:	2001      	movne	r0, #1
 8000610:	2000      	moveq	r0, #0
 8000612:	4770      	bx	lr

08000614 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000614:	b10a      	cbz	r2, 800061a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000616:	6101      	str	r1, [r0, #16]
 8000618:	4770      	bx	lr
 800061a:	0409      	lsls	r1, r1, #16
 800061c:	e7fb      	b.n	8000616 <HAL_GPIO_WritePin+0x2>

0800061e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800061e:	68c3      	ldr	r3, [r0, #12]
 8000620:	4059      	eors	r1, r3
 8000622:	60c1      	str	r1, [r0, #12]
 8000624:	4770      	bx	lr
	...

08000628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000628:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800062c:	6959      	ldr	r1, [r3, #20]
 800062e:	4201      	tst	r1, r0
 8000630:	d002      	beq.n	8000638 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000632:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000634:	f000 ffd4 	bl	80015e0 <HAL_GPIO_EXTI_Callback>
 8000638:	bd08      	pop	{r3, pc}
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400

08000640 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000640:	6803      	ldr	r3, [r0, #0]
{
 8000642:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000646:	07db      	lsls	r3, r3, #31
{
 8000648:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800064a:	d410      	bmi.n	800066e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	079f      	lsls	r7, r3, #30
 8000650:	d45e      	bmi.n	8000710 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000652:	682b      	ldr	r3, [r5, #0]
 8000654:	0719      	lsls	r1, r3, #28
 8000656:	f100 8095 	bmi.w	8000784 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	075a      	lsls	r2, r3, #29
 800065e:	f100 80bf 	bmi.w	80007e0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000662:	69ea      	ldr	r2, [r5, #28]
 8000664:	2a00      	cmp	r2, #0
 8000666:	f040 812d 	bne.w	80008c4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800066a:	2000      	movs	r0, #0
 800066c:	e014      	b.n	8000698 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800066e:	4c90      	ldr	r4, [pc, #576]	; (80008b0 <HAL_RCC_OscConfig+0x270>)
 8000670:	6863      	ldr	r3, [r4, #4]
 8000672:	f003 030c 	and.w	r3, r3, #12
 8000676:	2b04      	cmp	r3, #4
 8000678:	d007      	beq.n	800068a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800067a:	6863      	ldr	r3, [r4, #4]
 800067c:	f003 030c 	and.w	r3, r3, #12
 8000680:	2b08      	cmp	r3, #8
 8000682:	d10c      	bne.n	800069e <HAL_RCC_OscConfig+0x5e>
 8000684:	6863      	ldr	r3, [r4, #4]
 8000686:	03de      	lsls	r6, r3, #15
 8000688:	d509      	bpl.n	800069e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	039c      	lsls	r4, r3, #14
 800068e:	d5dd      	bpl.n	800064c <HAL_RCC_OscConfig+0xc>
 8000690:	686b      	ldr	r3, [r5, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1da      	bne.n	800064c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000696:	2001      	movs	r0, #1
}
 8000698:	b002      	add	sp, #8
 800069a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800069e:	686b      	ldr	r3, [r5, #4]
 80006a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006a4:	d110      	bne.n	80006c8 <HAL_RCC_OscConfig+0x88>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006ae:	f7ff fe4f 	bl	8000350 <HAL_GetTick>
 80006b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	0398      	lsls	r0, r3, #14
 80006b8:	d4c8      	bmi.n	800064c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ba:	f7ff fe49 	bl	8000350 <HAL_GetTick>
 80006be:	1b80      	subs	r0, r0, r6
 80006c0:	2864      	cmp	r0, #100	; 0x64
 80006c2:	d9f7      	bls.n	80006b4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80006c4:	2003      	movs	r0, #3
 80006c6:	e7e7      	b.n	8000698 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c8:	b99b      	cbnz	r3, 80006f2 <HAL_RCC_OscConfig+0xb2>
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d0:	6023      	str	r3, [r4, #0]
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006da:	f7ff fe39 	bl	8000350 <HAL_GetTick>
 80006de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	0399      	lsls	r1, r3, #14
 80006e4:	d5b2      	bpl.n	800064c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006e6:	f7ff fe33 	bl	8000350 <HAL_GetTick>
 80006ea:	1b80      	subs	r0, r0, r6
 80006ec:	2864      	cmp	r0, #100	; 0x64
 80006ee:	d9f7      	bls.n	80006e0 <HAL_RCC_OscConfig+0xa0>
 80006f0:	e7e8      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	d103      	bne.n	8000702 <HAL_RCC_OscConfig+0xc2>
 80006fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006fe:	6023      	str	r3, [r4, #0]
 8000700:	e7d1      	b.n	80006a6 <HAL_RCC_OscConfig+0x66>
 8000702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000706:	6023      	str	r3, [r4, #0]
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070e:	e7cd      	b.n	80006ac <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000710:	4c67      	ldr	r4, [pc, #412]	; (80008b0 <HAL_RCC_OscConfig+0x270>)
 8000712:	6863      	ldr	r3, [r4, #4]
 8000714:	f013 0f0c 	tst.w	r3, #12
 8000718:	d007      	beq.n	800072a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800071a:	6863      	ldr	r3, [r4, #4]
 800071c:	f003 030c 	and.w	r3, r3, #12
 8000720:	2b08      	cmp	r3, #8
 8000722:	d110      	bne.n	8000746 <HAL_RCC_OscConfig+0x106>
 8000724:	6863      	ldr	r3, [r4, #4]
 8000726:	03da      	lsls	r2, r3, #15
 8000728:	d40d      	bmi.n	8000746 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	079b      	lsls	r3, r3, #30
 800072e:	d502      	bpl.n	8000736 <HAL_RCC_OscConfig+0xf6>
 8000730:	692b      	ldr	r3, [r5, #16]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d1af      	bne.n	8000696 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	696a      	ldr	r2, [r5, #20]
 800073a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800073e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000742:	6023      	str	r3, [r4, #0]
 8000744:	e785      	b.n	8000652 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000746:	692a      	ldr	r2, [r5, #16]
 8000748:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <HAL_RCC_OscConfig+0x274>)
 800074a:	b16a      	cbz	r2, 8000768 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000750:	f7ff fdfe 	bl	8000350 <HAL_GetTick>
 8000754:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	079f      	lsls	r7, r3, #30
 800075a:	d4ec      	bmi.n	8000736 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800075c:	f7ff fdf8 	bl	8000350 <HAL_GetTick>
 8000760:	1b80      	subs	r0, r0, r6
 8000762:	2802      	cmp	r0, #2
 8000764:	d9f7      	bls.n	8000756 <HAL_RCC_OscConfig+0x116>
 8000766:	e7ad      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000768:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fdf1 	bl	8000350 <HAL_GetTick>
 800076e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	0798      	lsls	r0, r3, #30
 8000774:	f57f af6d 	bpl.w	8000652 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000778:	f7ff fdea 	bl	8000350 <HAL_GetTick>
 800077c:	1b80      	subs	r0, r0, r6
 800077e:	2802      	cmp	r0, #2
 8000780:	d9f6      	bls.n	8000770 <HAL_RCC_OscConfig+0x130>
 8000782:	e79f      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000784:	69aa      	ldr	r2, [r5, #24]
 8000786:	4c4a      	ldr	r4, [pc, #296]	; (80008b0 <HAL_RCC_OscConfig+0x270>)
 8000788:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <HAL_RCC_OscConfig+0x278>)
 800078a:	b1da      	cbz	r2, 80007c4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000790:	f7ff fdde 	bl	8000350 <HAL_GetTick>
 8000794:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000798:	079b      	lsls	r3, r3, #30
 800079a:	d50d      	bpl.n	80007b8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800079c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007a0:	4b46      	ldr	r3, [pc, #280]	; (80008bc <HAL_RCC_OscConfig+0x27c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80007a8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80007aa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80007ac:	9b01      	ldr	r3, [sp, #4]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	9201      	str	r2, [sp, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f9      	bne.n	80007aa <HAL_RCC_OscConfig+0x16a>
 80007b6:	e750      	b.n	800065a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b8:	f7ff fdca 	bl	8000350 <HAL_GetTick>
 80007bc:	1b80      	subs	r0, r0, r6
 80007be:	2802      	cmp	r0, #2
 80007c0:	d9e9      	bls.n	8000796 <HAL_RCC_OscConfig+0x156>
 80007c2:	e77f      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80007c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007c6:	f7ff fdc3 	bl	8000350 <HAL_GetTick>
 80007ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007ce:	079f      	lsls	r7, r3, #30
 80007d0:	f57f af43 	bpl.w	800065a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d4:	f7ff fdbc 	bl	8000350 <HAL_GetTick>
 80007d8:	1b80      	subs	r0, r0, r6
 80007da:	2802      	cmp	r0, #2
 80007dc:	d9f6      	bls.n	80007cc <HAL_RCC_OscConfig+0x18c>
 80007de:	e771      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007e0:	4c33      	ldr	r4, [pc, #204]	; (80008b0 <HAL_RCC_OscConfig+0x270>)
 80007e2:	69e3      	ldr	r3, [r4, #28]
 80007e4:	00d8      	lsls	r0, r3, #3
 80007e6:	d424      	bmi.n	8000832 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80007e8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	69e3      	ldr	r3, [r4, #28]
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	61e3      	str	r3, [r4, #28]
 80007f2:	69e3      	ldr	r3, [r4, #28]
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fc:	4e30      	ldr	r6, [pc, #192]	; (80008c0 <HAL_RCC_OscConfig+0x280>)
 80007fe:	6833      	ldr	r3, [r6, #0]
 8000800:	05d9      	lsls	r1, r3, #23
 8000802:	d518      	bpl.n	8000836 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000804:	68eb      	ldr	r3, [r5, #12]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d126      	bne.n	8000858 <HAL_RCC_OscConfig+0x218>
 800080a:	6a23      	ldr	r3, [r4, #32]
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000812:	f7ff fd9d 	bl	8000350 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000816:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800081a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	079b      	lsls	r3, r3, #30
 8000820:	d53f      	bpl.n	80008a2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000822:	2f00      	cmp	r7, #0
 8000824:	f43f af1d 	beq.w	8000662 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000828:	69e3      	ldr	r3, [r4, #28]
 800082a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800082e:	61e3      	str	r3, [r4, #28]
 8000830:	e717      	b.n	8000662 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000832:	2700      	movs	r7, #0
 8000834:	e7e2      	b.n	80007fc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000836:	6833      	ldr	r3, [r6, #0]
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800083e:	f7ff fd87 	bl	8000350 <HAL_GetTick>
 8000842:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000844:	6833      	ldr	r3, [r6, #0]
 8000846:	05da      	lsls	r2, r3, #23
 8000848:	d4dc      	bmi.n	8000804 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800084a:	f7ff fd81 	bl	8000350 <HAL_GetTick>
 800084e:	eba0 0008 	sub.w	r0, r0, r8
 8000852:	2864      	cmp	r0, #100	; 0x64
 8000854:	d9f6      	bls.n	8000844 <HAL_RCC_OscConfig+0x204>
 8000856:	e735      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000858:	b9ab      	cbnz	r3, 8000886 <HAL_RCC_OscConfig+0x246>
 800085a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800085c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000860:	f023 0301 	bic.w	r3, r3, #1
 8000864:	6223      	str	r3, [r4, #32]
 8000866:	6a23      	ldr	r3, [r4, #32]
 8000868:	f023 0304 	bic.w	r3, r3, #4
 800086c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800086e:	f7ff fd6f 	bl	8000350 <HAL_GetTick>
 8000872:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000874:	6a23      	ldr	r3, [r4, #32]
 8000876:	0798      	lsls	r0, r3, #30
 8000878:	d5d3      	bpl.n	8000822 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800087a:	f7ff fd69 	bl	8000350 <HAL_GetTick>
 800087e:	1b80      	subs	r0, r0, r6
 8000880:	4540      	cmp	r0, r8
 8000882:	d9f7      	bls.n	8000874 <HAL_RCC_OscConfig+0x234>
 8000884:	e71e      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000886:	2b05      	cmp	r3, #5
 8000888:	6a23      	ldr	r3, [r4, #32]
 800088a:	d103      	bne.n	8000894 <HAL_RCC_OscConfig+0x254>
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6223      	str	r3, [r4, #32]
 8000892:	e7ba      	b.n	800080a <HAL_RCC_OscConfig+0x1ca>
 8000894:	f023 0301 	bic.w	r3, r3, #1
 8000898:	6223      	str	r3, [r4, #32]
 800089a:	6a23      	ldr	r3, [r4, #32]
 800089c:	f023 0304 	bic.w	r3, r3, #4
 80008a0:	e7b6      	b.n	8000810 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a2:	f7ff fd55 	bl	8000350 <HAL_GetTick>
 80008a6:	eba0 0008 	sub.w	r0, r0, r8
 80008aa:	42b0      	cmp	r0, r6
 80008ac:	d9b6      	bls.n	800081c <HAL_RCC_OscConfig+0x1dc>
 80008ae:	e709      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
 80008b0:	40021000 	.word	0x40021000
 80008b4:	42420000 	.word	0x42420000
 80008b8:	42420480 	.word	0x42420480
 80008bc:	20000008 	.word	0x20000008
 80008c0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008c4:	4c22      	ldr	r4, [pc, #136]	; (8000950 <HAL_RCC_OscConfig+0x310>)
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	f003 030c 	and.w	r3, r3, #12
 80008cc:	2b08      	cmp	r3, #8
 80008ce:	f43f aee2 	beq.w	8000696 <HAL_RCC_OscConfig+0x56>
 80008d2:	2300      	movs	r3, #0
 80008d4:	4e1f      	ldr	r6, [pc, #124]	; (8000954 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80008d8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008da:	d12b      	bne.n	8000934 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80008dc:	f7ff fd38 	bl	8000350 <HAL_GetTick>
 80008e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	0199      	lsls	r1, r3, #6
 80008e6:	d41f      	bmi.n	8000928 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008e8:	6a2b      	ldr	r3, [r5, #32]
 80008ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ee:	d105      	bne.n	80008fc <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008f2:	68a9      	ldr	r1, [r5, #8]
 80008f4:	f022 020f 	bic.w	r2, r2, #15
 80008f8:	430a      	orrs	r2, r1
 80008fa:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80008fe:	6862      	ldr	r2, [r4, #4]
 8000900:	430b      	orrs	r3, r1
 8000902:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000906:	4313      	orrs	r3, r2
 8000908:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800090a:	2301      	movs	r3, #1
 800090c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800090e:	f7ff fd1f 	bl	8000350 <HAL_GetTick>
 8000912:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	019a      	lsls	r2, r3, #6
 8000918:	f53f aea7 	bmi.w	800066a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800091c:	f7ff fd18 	bl	8000350 <HAL_GetTick>
 8000920:	1b40      	subs	r0, r0, r5
 8000922:	2802      	cmp	r0, #2
 8000924:	d9f6      	bls.n	8000914 <HAL_RCC_OscConfig+0x2d4>
 8000926:	e6cd      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000928:	f7ff fd12 	bl	8000350 <HAL_GetTick>
 800092c:	1bc0      	subs	r0, r0, r7
 800092e:	2802      	cmp	r0, #2
 8000930:	d9d7      	bls.n	80008e2 <HAL_RCC_OscConfig+0x2a2>
 8000932:	e6c7      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000934:	f7ff fd0c 	bl	8000350 <HAL_GetTick>
 8000938:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	f57f ae94 	bpl.w	800066a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000942:	f7ff fd05 	bl	8000350 <HAL_GetTick>
 8000946:	1b40      	subs	r0, r0, r5
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f6      	bls.n	800093a <HAL_RCC_OscConfig+0x2fa>
 800094c:	e6ba      	b.n	80006c4 <HAL_RCC_OscConfig+0x84>
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	42420060 	.word	0x42420060

08000958 <HAL_RCC_GetSysClockFreq>:
{
 8000958:	b530      	push	{r4, r5, lr}
 800095a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800095c:	466c      	mov	r4, sp
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x78>)
 8000960:	f103 0510 	add.w	r5, r3, #16
 8000964:	4622      	mov	r2, r4
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	6859      	ldr	r1, [r3, #4]
 800096a:	3308      	adds	r3, #8
 800096c:	c203      	stmia	r2!, {r0, r1}
 800096e:	42ab      	cmp	r3, r5
 8000970:	4614      	mov	r4, r2
 8000972:	d1f7      	bne.n	8000964 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8000976:	ac04      	add	r4, sp, #16
 8000978:	f103 0510 	add.w	r5, r3, #16
 800097c:	4622      	mov	r2, r4
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	6859      	ldr	r1, [r3, #4]
 8000982:	3308      	adds	r3, #8
 8000984:	c203      	stmia	r2!, {r0, r1}
 8000986:	42ab      	cmp	r3, r5
 8000988:	4614      	mov	r4, r2
 800098a:	d1f7      	bne.n	800097c <HAL_RCC_GetSysClockFreq+0x24>
  tmpreg = RCC->CFGR;
 800098c:	4912      	ldr	r1, [pc, #72]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x80>)
 800098e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000990:	f003 020c 	and.w	r2, r3, #12
 8000994:	2a08      	cmp	r2, #8
 8000996:	d118      	bne.n	80009ca <HAL_RCC_GetSysClockFreq+0x72>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000998:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800099c:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800099e:	bf48      	it	mi
 80009a0:	6acb      	ldrmi	r3, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009a2:	a808      	add	r0, sp, #32
 80009a4:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80009a6:	bf48      	it	mi
 80009a8:	f003 030f 	andmi.w	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009ac:	f812 0c20 	ldrb.w	r0, [r2, #-32]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80009b0:	bf41      	itttt	mi
 80009b2:	aa08      	addmi	r2, sp, #32
 80009b4:	189b      	addmi	r3, r3, r2
 80009b6:	f813 2c10 	ldrbmi.w	r2, [r3, #-16]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80009ba:	4b08      	ldrmi	r3, [pc, #32]	; (80009dc <HAL_RCC_GetSysClockFreq+0x84>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009bc:	bf54      	ite	pl
 80009be:	4b08      	ldrpl	r3, [pc, #32]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80009c0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009c4:	4358      	muls	r0, r3
}
 80009c6:	b009      	add	sp, #36	; 0x24
 80009c8:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <HAL_RCC_GetSysClockFreq+0x84>)
  return sysclockfreq;
 80009cc:	e7fb      	b.n	80009c6 <HAL_RCC_GetSysClockFreq+0x6e>
 80009ce:	bf00      	nop
 80009d0:	08002600 	.word	0x08002600
 80009d4:	08002610 	.word	0x08002610
 80009d8:	40021000 	.word	0x40021000
 80009dc:	007a1200 	.word	0x007a1200
 80009e0:	003d0900 	.word	0x003d0900

080009e4 <HAL_RCC_ClockConfig>:
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009e4:	6802      	ldr	r2, [r0, #0]
{
 80009e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009e8:	f012 0f02 	tst.w	r2, #2
{
 80009ec:	4605      	mov	r5, r0
 80009ee:	4c36      	ldr	r4, [pc, #216]	; (8000ac8 <HAL_RCC_ClockConfig+0xe4>)
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009f0:	d005      	beq.n	80009fe <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009f2:	6863      	ldr	r3, [r4, #4]
 80009f4:	6881      	ldr	r1, [r0, #8]
 80009f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6063      	str	r3, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009fe:	07d0      	lsls	r0, r2, #31
 8000a00:	d41a      	bmi.n	8000a38 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a02:	682a      	ldr	r2, [r5, #0]
 8000a04:	0751      	lsls	r1, r2, #29
 8000a06:	d456      	bmi.n	8000ab6 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a08:	0713      	lsls	r3, r2, #28
 8000a0a:	d506      	bpl.n	8000a1a <HAL_RCC_ClockConfig+0x36>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a0c:	6863      	ldr	r3, [r4, #4]
 8000a0e:	692a      	ldr	r2, [r5, #16]
 8000a10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a18:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a1a:	f7ff ff9d 	bl	8000958 <HAL_RCC_GetSysClockFreq>
 8000a1e:	6863      	ldr	r3, [r4, #4]
 8000a20:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <HAL_RCC_ClockConfig+0xe8>)
 8000a22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	40d8      	lsrs	r0, r3
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <HAL_RCC_ClockConfig+0xec>)
 8000a2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f7ff fc66 	bl	8000300 <HAL_InitTick>
  return HAL_OK;
 8000a34:	2000      	movs	r0, #0
 8000a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a38:	6868      	ldr	r0, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a3a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3c:	2801      	cmp	r0, #1
 8000a3e:	d102      	bne.n	8000a46 <HAL_RCC_ClockConfig+0x62>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a40:	039a      	lsls	r2, r3, #14
 8000a42:	d405      	bmi.n	8000a50 <HAL_RCC_ClockConfig+0x6c>
 8000a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a46:	2802      	cmp	r0, #2
 8000a48:	d11b      	bne.n	8000a82 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a4e:	d039      	beq.n	8000ac4 <HAL_RCC_ClockConfig+0xe0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a50:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a52:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a56:	f023 0303 	bic.w	r3, r3, #3
 8000a5a:	4318      	orrs	r0, r3
 8000a5c:	6060      	str	r0, [r4, #4]
    tickstart = HAL_GetTick();
 8000a5e:	f7ff fc77 	bl	8000350 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a62:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a64:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d10e      	bne.n	8000a88 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a6a:	6863      	ldr	r3, [r4, #4]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d0c6      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a74:	f7ff fc6c 	bl	8000350 <HAL_GetTick>
 8000a78:	1b80      	subs	r0, r0, r6
 8000a7a:	42b8      	cmp	r0, r7
 8000a7c:	d9f5      	bls.n	8000a6a <HAL_RCC_ClockConfig+0x86>
          return HAL_TIMEOUT;
 8000a7e:	2003      	movs	r0, #3
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a82:	f013 0f02 	tst.w	r3, #2
 8000a86:	e7e2      	b.n	8000a4e <HAL_RCC_ClockConfig+0x6a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d10f      	bne.n	8000aac <HAL_RCC_ClockConfig+0xc8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a8c:	6863      	ldr	r3, [r4, #4]
 8000a8e:	f003 030c 	and.w	r3, r3, #12
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d0b5      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a96:	f7ff fc5b 	bl	8000350 <HAL_GetTick>
 8000a9a:	1b80      	subs	r0, r0, r6
 8000a9c:	42b8      	cmp	r0, r7
 8000a9e:	d9f5      	bls.n	8000a8c <HAL_RCC_ClockConfig+0xa8>
 8000aa0:	e7ed      	b.n	8000a7e <HAL_RCC_ClockConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa2:	f7ff fc55 	bl	8000350 <HAL_GetTick>
 8000aa6:	1b80      	subs	r0, r0, r6
 8000aa8:	42b8      	cmp	r0, r7
 8000aaa:	d8e8      	bhi.n	8000a7e <HAL_RCC_ClockConfig+0x9a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	f013 0f0c 	tst.w	r3, #12
 8000ab2:	d1f6      	bne.n	8000aa2 <HAL_RCC_ClockConfig+0xbe>
 8000ab4:	e7a5      	b.n	8000a02 <HAL_RCC_ClockConfig+0x1e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ab6:	6863      	ldr	r3, [r4, #4]
 8000ab8:	68e9      	ldr	r1, [r5, #12]
 8000aba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6063      	str	r3, [r4, #4]
 8000ac2:	e7a1      	b.n	8000a08 <HAL_RCC_ClockConfig+0x24>
        return HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1
}
 8000ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	08002624 	.word	0x08002624
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ae2:	6810      	ldr	r0, [r2, #0]
}    
 8000ae4:	40d8      	lsrs	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	08002634 	.word	0x08002634
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000afe:	5cd3      	ldrb	r3, [r2, r3]
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b02:	6810      	ldr	r0, [r2, #0]
} 
 8000b04:	40d8      	lsrs	r0, r3
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	08002634 	.word	0x08002634
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b14:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000b16:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	f042 0201 	orr.w	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	4770      	bx	lr

08000b2a <HAL_TIM_OC_DelayElapsedCallback>:
 8000b2a:	4770      	bx	lr

08000b2c <HAL_TIM_IC_CaptureCallback>:
 8000b2c:	4770      	bx	lr

08000b2e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b2e:	4770      	bx	lr

08000b30 <HAL_TIM_TriggerCallback>:
 8000b30:	4770      	bx	lr

08000b32 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b32:	6803      	ldr	r3, [r0, #0]
{
 8000b34:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b36:	691a      	ldr	r2, [r3, #16]
{
 8000b38:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b3a:	0791      	lsls	r1, r2, #30
 8000b3c:	d50e      	bpl.n	8000b5c <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	0792      	lsls	r2, r2, #30
 8000b42:	d50b      	bpl.n	8000b5c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b44:	f06f 0202 	mvn.w	r2, #2
 8000b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b4a:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b4c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b4e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b50:	079b      	lsls	r3, r3, #30
 8000b52:	d077      	beq.n	8000c44 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000b54:	f7ff ffea 	bl	8000b2c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	0750      	lsls	r0, r2, #29
 8000b62:	d510      	bpl.n	8000b86 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	0751      	lsls	r1, r2, #29
 8000b68:	d50d      	bpl.n	8000b86 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b6a:	f06f 0204 	mvn.w	r2, #4
 8000b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b70:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b72:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b74:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b76:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000b7a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b7c:	d068      	beq.n	8000c50 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b7e:	f7ff ffd5 	bl	8000b2c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b82:	2300      	movs	r3, #0
 8000b84:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	691a      	ldr	r2, [r3, #16]
 8000b8a:	0712      	lsls	r2, r2, #28
 8000b8c:	d50f      	bpl.n	8000bae <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	0710      	lsls	r0, r2, #28
 8000b92:	d50c      	bpl.n	8000bae <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b94:	f06f 0208 	mvn.w	r2, #8
 8000b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b9a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b9c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b9e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ba0:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000ba2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ba4:	d05a      	beq.n	8000c5c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ba6:	f7ff ffc1 	bl	8000b2c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000baa:	2300      	movs	r3, #0
 8000bac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	06d2      	lsls	r2, r2, #27
 8000bb4:	d510      	bpl.n	8000bd8 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	06d0      	lsls	r0, r2, #27
 8000bba:	d50d      	bpl.n	8000bd8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000bbc:	f06f 0210 	mvn.w	r2, #16
 8000bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bc2:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bc4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bc6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bc8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000bcc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bce:	d04b      	beq.n	8000c68 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bd0:	f7ff ffac 	bl	8000b2c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	07d1      	lsls	r1, r2, #31
 8000bde:	d508      	bpl.n	8000bf2 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	07d2      	lsls	r2, r2, #31
 8000be4:	d505      	bpl.n	8000bf2 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000be6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000bec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bee:	f000 fd19 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	0610      	lsls	r0, r2, #24
 8000bf8:	d508      	bpl.n	8000c0c <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	0611      	lsls	r1, r2, #24
 8000bfe:	d505      	bpl.n	8000c0c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c04:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c08:	f000 f8a3 	bl	8000d52 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	0652      	lsls	r2, r2, #25
 8000c12:	d508      	bpl.n	8000c26 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	0650      	lsls	r0, r2, #25
 8000c18:	d505      	bpl.n	8000c26 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c20:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c22:	f7ff ff85 	bl	8000b30 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	0691      	lsls	r1, r2, #26
 8000c2c:	d522      	bpl.n	8000c74 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	0692      	lsls	r2, r2, #26
 8000c32:	d51f      	bpl.n	8000c74 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c34:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c38:	4620      	mov	r0, r4
    }
  }
}
 8000c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c40:	f000 b886 	b.w	8000d50 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c44:	f7ff ff71 	bl	8000b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff ff70 	bl	8000b2e <HAL_TIM_PWM_PulseFinishedCallback>
 8000c4e:	e783      	b.n	8000b58 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c50:	f7ff ff6b 	bl	8000b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff ff6a 	bl	8000b2e <HAL_TIM_PWM_PulseFinishedCallback>
 8000c5a:	e792      	b.n	8000b82 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c5c:	f7ff ff65 	bl	8000b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff ff64 	bl	8000b2e <HAL_TIM_PWM_PulseFinishedCallback>
 8000c66:	e7a0      	b.n	8000baa <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c68:	f7ff ff5f 	bl	8000b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff ff5e 	bl	8000b2e <HAL_TIM_PWM_PulseFinishedCallback>
 8000c72:	e7af      	b.n	8000bd4 <HAL_TIM_IRQHandler+0xa2>
 8000c74:	bd10      	pop	{r4, pc}
	...

08000c78 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c78:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 8000c7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d00a      	beq.n	8000c96 <TIM_Base_SetConfig+0x1e>
 8000c80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c84:	d007      	beq.n	8000c96 <TIM_Base_SetConfig+0x1e>
 8000c86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d003      	beq.n	8000c96 <TIM_Base_SetConfig+0x1e>
 8000c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d111      	bne.n	8000cba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000c96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c9c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <TIM_Base_SetConfig+0x9c>)
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d015      	beq.n	8000cd0 <TIM_Base_SetConfig+0x58>
 8000ca4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ca8:	d012      	beq.n	8000cd0 <TIM_Base_SetConfig+0x58>
 8000caa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	d00e      	beq.n	8000cd0 <TIM_Base_SetConfig+0x58>
 8000cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d00a      	beq.n	8000cd0 <TIM_Base_SetConfig+0x58>
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <TIM_Base_SetConfig+0xa0>)
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d007      	beq.n	8000cd0 <TIM_Base_SetConfig+0x58>
 8000cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d003      	beq.n	8000cd0 <TIM_Base_SetConfig+0x58>
 8000cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d103      	bne.n	8000cd8 <TIM_Base_SetConfig+0x60>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cd0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cd6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cd8:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cde:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000ce0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ce2:	688b      	ldr	r3, [r1, #8]
 8000ce4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000ce6:	680b      	ldr	r3, [r1, #0]
 8000ce8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <TIM_Base_SetConfig+0x9c>)
 8000cec:	4298      	cmp	r0, r3
 8000cee:	d00b      	beq.n	8000d08 <TIM_Base_SetConfig+0x90>
 8000cf0:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d007      	beq.n	8000d08 <TIM_Base_SetConfig+0x90>
 8000cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	d003      	beq.n	8000d08 <TIM_Base_SetConfig+0x90>
 8000d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d04:	4298      	cmp	r0, r3
 8000d06:	d101      	bne.n	8000d0c <TIM_Base_SetConfig+0x94>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d08:	690b      	ldr	r3, [r1, #16]
 8000d0a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	6143      	str	r3, [r0, #20]
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40012c00 	.word	0x40012c00
 8000d18:	40014000 	.word	0x40014000

08000d1c <HAL_TIM_Base_Init>:
{
 8000d1c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d1e:	4604      	mov	r4, r0
 8000d20:	b1a0      	cbz	r0, 8000d4c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d2a:	b91b      	cbnz	r3, 8000d34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d30:	f000 fcbc 	bl	80016ac <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d36:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d3c:	1d21      	adds	r1, r4, #4
 8000d3e:	f7ff ff9b 	bl	8000c78 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d42:	2301      	movs	r3, #1
  return HAL_OK;
 8000d44:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
}
 8000d4e:	bd10      	pop	{r4, pc}

08000d50 <HAL_TIMEx_CommutationCallback>:
 8000d50:	4770      	bx	lr

08000d52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d52:	4770      	bx	lr

08000d54 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d5a:	6805      	ldr	r5, [r0, #0]
 8000d5c:	68c2      	ldr	r2, [r0, #12]
 8000d5e:	692b      	ldr	r3, [r5, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d60:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d66:	4313      	orrs	r3, r2
 8000d68:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d6a:	6883      	ldr	r3, [r0, #8]
 8000d6c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8000d6e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d70:	4303      	orrs	r3, r0
 8000d72:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000d76:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d7a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8000d7c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d80:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d86:	696b      	ldr	r3, [r5, #20]
 8000d88:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8000d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d90:	4313      	orrs	r3, r2

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d92:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d96:	616b      	str	r3, [r5, #20]
 8000d98:	4b7e      	ldr	r3, [pc, #504]	; (8000f94 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d9a:	d17f      	bne.n	8000e9c <UART_SetConfig+0x148>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 8000d9c:	429d      	cmp	r5, r3
 8000d9e:	f04f 0419 	mov.w	r4, #25
 8000da2:	d147      	bne.n	8000e34 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000da4:	f7ff fea6 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000da8:	fb04 f300 	mul.w	r3, r4, r0
 8000dac:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000db0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000db4:	007f      	lsls	r7, r7, #1
 8000db6:	fbb3 f3f7 	udiv	r3, r3, r7
 8000dba:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dbe:	011f      	lsls	r7, r3, #4
 8000dc0:	f7ff fe98 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000dc4:	4360      	muls	r0, r4
 8000dc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fbb0 f6f3 	udiv	r6, r0, r3
 8000dd0:	f7ff fe90 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000dd4:	4360      	muls	r0, r4
 8000dd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000de4:	fb08 6313 	mls	r3, r8, r3, r6
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	3332      	adds	r3, #50	; 0x32
 8000dec:	fbb3 f3f8 	udiv	r3, r3, r8
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000df6:	f7ff fe7d 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000dfa:	4360      	muls	r0, r4
 8000dfc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e00:	0052      	lsls	r2, r2, #1
 8000e02:	fbb0 faf2 	udiv	sl, r0, r2
 8000e06:	f7ff fe75 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e0a:	4360      	muls	r0, r4
 8000e0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e16:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e1a:	fb08 a313 	mls	r3, r8, r3, sl
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	3332      	adds	r3, #50	; 0x32
 8000e22:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e2c:	4433      	add	r3, r6
 8000e2e:	60ab      	str	r3, [r5, #8]
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e34:	f7ff fe4e 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000e38:	fb04 f300 	mul.w	r3, r4, r0
 8000e3c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000e40:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e44:	007f      	lsls	r7, r7, #1
 8000e46:	fbb3 f3f7 	udiv	r3, r3, r7
 8000e4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e4e:	011f      	lsls	r7, r3, #4
 8000e50:	f7ff fe40 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000e54:	4360      	muls	r0, r4
 8000e56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fbb0 f6f3 	udiv	r6, r0, r3
 8000e60:	f7ff fe38 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000e64:	4360      	muls	r0, r4
 8000e66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e70:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e74:	fb08 6313 	mls	r3, r8, r3, r6
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	3332      	adds	r3, #50	; 0x32
 8000e7c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000e86:	f7ff fe25 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000e8a:	4360      	muls	r0, r4
 8000e8c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e90:	0052      	lsls	r2, r2, #1
 8000e92:	fbb0 faf2 	udiv	sl, r0, r2
 8000e96:	f7ff fe1d 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000e9a:	e7b6      	b.n	8000e0a <UART_SetConfig+0xb6>
    if(huart->Instance == USART1)
 8000e9c:	429d      	cmp	r5, r3
 8000e9e:	f04f 0419 	mov.w	r4, #25
 8000ea2:	d143      	bne.n	8000f2c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ea4:	f7ff fe26 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000ea8:	fb04 f300 	mul.w	r3, r4, r0
 8000eac:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000eb0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000eb4:	00b6      	lsls	r6, r6, #2
 8000eb6:	fbb3 f3f6 	udiv	r3, r3, r6
 8000eba:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ebe:	011e      	lsls	r6, r3, #4
 8000ec0:	f7ff fe18 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000ec4:	4360      	muls	r0, r4
 8000ec6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ed0:	f7ff fe10 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000ed4:	4360      	muls	r0, r4
 8000ed6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ee4:	fb08 7313 	mls	r3, r8, r3, r7
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	3332      	adds	r3, #50	; 0x32
 8000eec:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ef0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ef4:	f7ff fdfe 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
 8000ef8:	4360      	muls	r0, r4
 8000efa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	fbb0 faf2 	udiv	sl, r0, r2
 8000f04:	f7ff fdf6 	bl	8000af4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f08:	4360      	muls	r0, r4
 8000f0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f14:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f18:	fb08 a313 	mls	r3, r8, r3, sl
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	3332      	adds	r3, #50	; 0x32
 8000f20:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	433b      	orrs	r3, r7
 8000f2a:	e77f      	b.n	8000e2c <UART_SetConfig+0xd8>
 8000f2c:	f7ff fdd2 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000f30:	fb04 f300 	mul.w	r3, r4, r0
 8000f34:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f38:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f3c:	00b6      	lsls	r6, r6, #2
 8000f3e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f42:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f46:	011e      	lsls	r6, r3, #4
 8000f48:	f7ff fdc4 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000f4c:	4360      	muls	r0, r4
 8000f4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f58:	f7ff fdbc 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000f5c:	4360      	muls	r0, r4
 8000f5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f68:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f6c:	fb08 7313 	mls	r3, r8, r3, r7
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	3332      	adds	r3, #50	; 0x32
 8000f74:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f78:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f7c:	f7ff fdaa 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000f80:	4360      	muls	r0, r4
 8000f82:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	fbb0 faf2 	udiv	sl, r0, r2
 8000f8c:	f7ff fda2 	bl	8000ad4 <HAL_RCC_GetPCLK1Freq>
 8000f90:	e7ba      	b.n	8000f08 <UART_SetConfig+0x1b4>
 8000f92:	bf00      	nop
 8000f94:	40013800 	.word	0x40013800

08000f98 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460e      	mov	r6, r1
 8000f9e:	4617      	mov	r7, r2
 8000fa0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000fa2:	6821      	ldr	r1, [r4, #0]
 8000fa4:	680b      	ldr	r3, [r1, #0]
 8000fa6:	ea36 0303 	bics.w	r3, r6, r3
 8000faa:	d101      	bne.n	8000fb0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000fac:	2000      	movs	r0, #0
}
 8000fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000fb0:	1c6b      	adds	r3, r5, #1
 8000fb2:	d0f7      	beq.n	8000fa4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fb4:	b995      	cbnz	r5, 8000fdc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fb6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000fb8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000fc0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000fca:	2320      	movs	r3, #32
 8000fcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000fd0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fdc:	f7ff f9b8 	bl	8000350 <HAL_GetTick>
 8000fe0:	1bc0      	subs	r0, r0, r7
 8000fe2:	4285      	cmp	r5, r0
 8000fe4:	d2dd      	bcs.n	8000fa2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000fe6:	e7e6      	b.n	8000fb6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000fe8 <HAL_UART_Init>:
{
 8000fe8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000fea:	4604      	mov	r4, r0
 8000fec:	b340      	cbz	r0, 8001040 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ff6:	b91b      	cbnz	r3, 8001000 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000ff8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ffc:	f000 fb1c 	bl	8001638 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001000:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001002:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001004:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001008:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800100a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800100c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001010:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001012:	f7ff fe9f 	bl	8000d54 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001016:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001018:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001028:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001030:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001032:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001034:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001036:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800103a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800103e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
}
 8001042:	bd10      	pop	{r4, pc}

08001044 <HAL_UART_Transmit>:
{
 8001044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001048:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800104a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800104e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001050:	2b20      	cmp	r3, #32
{
 8001052:	460d      	mov	r5, r1
 8001054:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001056:	d14e      	bne.n	80010f6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001058:	2900      	cmp	r1, #0
 800105a:	d049      	beq.n	80010f0 <HAL_UART_Transmit+0xac>
 800105c:	2a00      	cmp	r2, #0
 800105e:	d047      	beq.n	80010f0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001060:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001064:	2b01      	cmp	r3, #1
 8001066:	d046      	beq.n	80010f6 <HAL_UART_Transmit+0xb2>
 8001068:	2301      	movs	r3, #1
 800106a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001072:	2321      	movs	r3, #33	; 0x21
 8001074:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001078:	f7ff f96a 	bl	8000350 <HAL_GetTick>
 800107c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800107e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001082:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001086:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001088:	b29b      	uxth	r3, r3
 800108a:	b96b      	cbnz	r3, 80010a8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4632      	mov	r2, r6
 8001090:	2140      	movs	r1, #64	; 0x40
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff ff80 	bl	8000f98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001098:	b9a8      	cbnz	r0, 80010c6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800109a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800109c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80010a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80010a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010aa:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010b2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010b4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ba:	4620      	mov	r0, r4
 80010bc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010be:	d10e      	bne.n	80010de <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010c0:	f7ff ff6a 	bl	8000f98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010c4:	b110      	cbz	r0, 80010cc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80010c6:	2003      	movs	r0, #3
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80010cc:	882b      	ldrh	r3, [r5, #0]
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	b943      	cbnz	r3, 80010ec <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80010da:	3502      	adds	r5, #2
 80010dc:	e7d3      	b.n	8001086 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010de:	f7ff ff5b 	bl	8000f98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d1ef      	bne.n	80010c6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	782a      	ldrb	r2, [r5, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	3501      	adds	r5, #1
 80010ee:	e7ca      	b.n	8001086 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
 80010f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80010f6:	2002      	movs	r0, #2
}
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010fe:	e003      	b.n	8001108 <LoopCopyDataInit>

08001100 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001102:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001104:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001106:	3104      	adds	r1, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800110c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800110e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001110:	d3f6      	bcc.n	8001100 <CopyDataInit>
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001114:	e002      	b.n	800111c <LoopFillZerobss>

08001116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001118:	f842 3b04 	str.w	r3, [r2], #4

0800111c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001120:	d3f9      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001122:	f7ff f8c3 	bl	80002ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f000 fb2f 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112a:	f000 f971 	bl	8001410 <main>
  bx lr
 800112e:	4770      	bx	lr
  ldr r3, =_sidata
 8001130:	0800279c 	.word	0x0800279c
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001138:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800113c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001140:	20000210 	.word	0x20000210

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>
	...

08001148 <check_car_in_slot_4>:
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
}

static inline U8 check_car_in_slot_4()
{
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001148:	2120      	movs	r1, #32
 800114a:	4801      	ldr	r0, [pc, #4]	; (8001150 <check_car_in_slot_4+0x8>)
 800114c:	f7ff ba5c 	b.w	8000608 <HAL_GPIO_ReadPin>
 8001150:	40011000 	.word	0x40011000

08001154 <check_car_in_slot_3>:
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	4801      	ldr	r0, [pc, #4]	; (800115c <check_car_in_slot_3+0x8>)
 8001158:	f7ff ba56 	b.w	8000608 <HAL_GPIO_ReadPin>
 800115c:	40010800 	.word	0x40010800

08001160 <check_car_in_slot_2>:
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001160:	2120      	movs	r1, #32
 8001162:	4801      	ldr	r0, [pc, #4]	; (8001168 <check_car_in_slot_2+0x8>)
 8001164:	f7ff ba50 	b.w	8000608 <HAL_GPIO_ReadPin>
 8001168:	40010800 	.word	0x40010800

0800116c <check_car_in_slot_1>:
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800116c:	2108      	movs	r1, #8
 800116e:	4801      	ldr	r0, [pc, #4]	; (8001174 <check_car_in_slot_1+0x8>)
 8001170:	f7ff ba4a 	b.w	8000608 <HAL_GPIO_ReadPin>
 8001174:	40010800 	.word	0x40010800

08001178 <end_state_handler>:

}

static void end_state_handler(WASHING_MACHINE_ST* wm_struct)
{
	printf("Car #%d is ready\r\n", wm_struct->CarSlot + 1);
 8001178:	6981      	ldr	r1, [r0, #24]
{
 800117a:	b510      	push	{r4, lr}
	printf("Car #%d is ready\r\n", wm_struct->CarSlot + 1);
 800117c:	3101      	adds	r1, #1
{
 800117e:	4604      	mov	r4, r0
	printf("Car #%d is ready\r\n", wm_struct->CarSlot + 1);
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <end_state_handler+0x1c>)
 8001182:	f000 fb2d 	bl	80017e0 <iprintf>
	wm_struct->State = ST_WAITING_FOR_START;
 8001186:	2300      	movs	r3, #0
	wm_struct ->StateCurrentTime = 0;
 8001188:	2200      	movs	r2, #0
	wm_struct->State = ST_WAITING_FOR_START;
 800118a:	7023      	strb	r3, [r4, #0]
	wm_struct ->StateCurrentTime = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001192:	bd10      	pop	{r4, pc}
 8001194:	08002669 	.word	0x08002669

08001198 <drying_state_handler>:
	if(0 == wm_struct->StateCurrentTime)
 8001198:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800119c:	4313      	orrs	r3, r2
{
 800119e:	b510      	push	{r4, lr}
 80011a0:	4604      	mov	r4, r0
	if(0 == wm_struct->StateCurrentTime)
 80011a2:	d104      	bne.n	80011ae <drying_state_handler+0x16>
		printf("Car #%d Start drying\r\n", wm_struct->CarSlot + 1);
 80011a4:	6981      	ldr	r1, [r0, #24]
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <drying_state_handler+0x3c>)
 80011a8:	3101      	adds	r1, #1
 80011aa:	f000 fb19 	bl	80017e0 <iprintf>
	wm_struct ->StateCurrentTime++;
 80011ae:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80011b2:	3201      	adds	r2, #1
 80011b4:	f143 0300 	adc.w	r3, r3, #0
	if(wm_struct ->StateCurrentTime > DRYING_ST_DURATION)
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf08      	it	eq
 80011bc:	2a1f      	cmpeq	r2, #31
	wm_struct ->StateCurrentTime++;
 80011be:	e9c4 2302 	strd	r2, r3, [r4, #8]
	if(wm_struct ->StateCurrentTime > DRYING_ST_DURATION)
 80011c2:	d305      	bcc.n	80011d0 <drying_state_handler+0x38>
		wm_struct->State = ST_END_WASH;
 80011c4:	2305      	movs	r3, #5
		wm_struct ->StateCurrentTime = 0;
 80011c6:	2200      	movs	r2, #0
		wm_struct->State = ST_END_WASH;
 80011c8:	7023      	strb	r3, [r4, #0]
		wm_struct ->StateCurrentTime = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	bf00      	nop
 80011d4:	08002652 	.word	0x08002652

080011d8 <washing_state_handler>:
	if(0 == wm_struct->StateCurrentTime)
 80011d8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80011dc:	4313      	orrs	r3, r2
{
 80011de:	b510      	push	{r4, lr}
 80011e0:	4604      	mov	r4, r0
	if(0 == wm_struct->StateCurrentTime)
 80011e2:	d104      	bne.n	80011ee <washing_state_handler+0x16>
		printf("Car #%d Start washing\r\n", wm_struct->CarSlot + 1);
 80011e4:	6981      	ldr	r1, [r0, #24]
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <washing_state_handler+0x3c>)
 80011e8:	3101      	adds	r1, #1
 80011ea:	f000 faf9 	bl	80017e0 <iprintf>
	wm_struct ->StateCurrentTime++;
 80011ee:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80011f2:	3201      	adds	r2, #1
 80011f4:	f143 0300 	adc.w	r3, r3, #0
	if(wm_struct ->StateCurrentTime > WASHIG_ST_DURATION)
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf08      	it	eq
 80011fc:	2a3d      	cmpeq	r2, #61	; 0x3d
	wm_struct ->StateCurrentTime++;
 80011fe:	e9c4 2302 	strd	r2, r3, [r4, #8]
	if(wm_struct ->StateCurrentTime > WASHIG_ST_DURATION)
 8001202:	d305      	bcc.n	8001210 <washing_state_handler+0x38>
		wm_struct->State = ST_DRYING;
 8001204:	2304      	movs	r3, #4
		wm_struct ->StateCurrentTime = 0;
 8001206:	2200      	movs	r2, #0
		wm_struct->State = ST_DRYING;
 8001208:	7023      	strb	r3, [r4, #0]
		wm_struct ->StateCurrentTime = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	080026ba 	.word	0x080026ba

08001218 <brush_state_handler>:
	if(0 == wm_struct->StateCurrentTime)
 8001218:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800121c:	4313      	orrs	r3, r2
{
 800121e:	b510      	push	{r4, lr}
 8001220:	4604      	mov	r4, r0
	if(0 == wm_struct->StateCurrentTime)
 8001222:	d104      	bne.n	800122e <brush_state_handler+0x16>
		printf("Car #%d Start brush\r\n", wm_struct->CarSlot + 1);
 8001224:	6981      	ldr	r1, [r0, #24]
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <brush_state_handler+0x3c>)
 8001228:	3101      	adds	r1, #1
 800122a:	f000 fad9 	bl	80017e0 <iprintf>
	wm_struct ->StateCurrentTime++;
 800122e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001232:	3201      	adds	r2, #1
 8001234:	f143 0300 	adc.w	r3, r3, #0
	if(wm_struct ->StateCurrentTime > BRUSH_ST_DURATION)
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf08      	it	eq
 800123c:	2a1f      	cmpeq	r2, #31
	wm_struct ->StateCurrentTime++;
 800123e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	if(wm_struct ->StateCurrentTime > BRUSH_ST_DURATION)
 8001242:	d305      	bcc.n	8001250 <brush_state_handler+0x38>
		wm_struct->State = ST_WASHING;
 8001244:	2303      	movs	r3, #3
		wm_struct ->StateCurrentTime = 0;
 8001246:	2200      	movs	r2, #0
		wm_struct->State = ST_WASHING;
 8001248:	7023      	strb	r3, [r4, #0]
		wm_struct ->StateCurrentTime = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001250:	bd10      	pop	{r4, pc}
 8001252:	bf00      	nop
 8001254:	0800263c 	.word	0x0800263c

08001258 <foam_state_handler>:
	if(0 == wm_struct->StateCurrentTime)
 8001258:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800125c:	4313      	orrs	r3, r2
{
 800125e:	b510      	push	{r4, lr}
 8001260:	4604      	mov	r4, r0
	if(0 == wm_struct->StateCurrentTime)
 8001262:	d104      	bne.n	800126e <foam_state_handler+0x16>
		printf("Car #%d Start foam\r\n", wm_struct->CarSlot + 1);
 8001264:	6981      	ldr	r1, [r0, #24]
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <foam_state_handler+0x3c>)
 8001268:	3101      	adds	r1, #1
 800126a:	f000 fab9 	bl	80017e0 <iprintf>
	wm_struct ->StateCurrentTime++;
 800126e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001272:	3201      	adds	r2, #1
 8001274:	f143 0300 	adc.w	r3, r3, #0
	if(wm_struct ->StateCurrentTime > FOAM_ST_DURATION)
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf08      	it	eq
 800127c:	2a1f      	cmpeq	r2, #31
	wm_struct ->StateCurrentTime++;
 800127e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	if(wm_struct ->StateCurrentTime > FOAM_ST_DURATION)
 8001282:	d305      	bcc.n	8001290 <foam_state_handler+0x38>
		wm_struct->State = ST_BRUSH;
 8001284:	2302      	movs	r3, #2
		wm_struct ->StateCurrentTime = 0;
 8001286:	2200      	movs	r2, #0
		wm_struct->State = ST_BRUSH;
 8001288:	7023      	strb	r3, [r4, #0]
		wm_struct ->StateCurrentTime = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001290:	bd10      	pop	{r4, pc}
 8001292:	bf00      	nop
 8001294:	0800267c 	.word	0x0800267c

08001298 <waiting_state_handler>:
	if(0 == wm_struct->StateCurrentTime && wm_struct->is_car_present())
 8001298:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800129c:	4313      	orrs	r3, r2
{
 800129e:	b510      	push	{r4, lr}
 80012a0:	4604      	mov	r4, r0
	if(0 == wm_struct->StateCurrentTime && wm_struct->is_car_present())
 80012a2:	d10e      	bne.n	80012c2 <waiting_state_handler+0x2a>
 80012a4:	69c3      	ldr	r3, [r0, #28]
 80012a6:	4798      	blx	r3
 80012a8:	b158      	cbz	r0, 80012c2 <waiting_state_handler+0x2a>
		printf("Car #%d Waiting for START button press\r\n", wm_struct->CarSlot + 1);
 80012aa:	69a1      	ldr	r1, [r4, #24]
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <waiting_state_handler+0x44>)
 80012ae:	3101      	adds	r1, #1
 80012b0:	f000 fa96 	bl	80017e0 <iprintf>
		wm_struct ->StateCurrentTime++;
 80012b4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80012b8:	3201      	adds	r2, #1
 80012ba:	f143 0300 	adc.w	r3, r3, #0
 80012be:	e9c4 2302 	strd	r2, r3, [r4, #8]
	if(app_start_button_pressed && wm_struct->is_car_present())
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <waiting_state_handler+0x48>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b143      	cbz	r3, 80012da <waiting_state_handler+0x42>
 80012c8:	69e3      	ldr	r3, [r4, #28]
 80012ca:	4798      	blx	r3
 80012cc:	b128      	cbz	r0, 80012da <waiting_state_handler+0x42>
		wm_struct->State = ST_FOAM;
 80012ce:	2301      	movs	r3, #1
		wm_struct ->StateCurrentTime = 0;
 80012d0:	2200      	movs	r2, #0
		wm_struct->State = ST_FOAM;
 80012d2:	7023      	strb	r3, [r4, #0]
		wm_struct ->StateCurrentTime = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	08002691 	.word	0x08002691
 80012e0:	20000170 	.word	0x20000170

080012e4 <ApplicationScan>:




void ApplicationScan(void)
{
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <ApplicationScan+0x84>)
 80012e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


void AppInit(void)
{
	int i;
	for(i = 0; i< MAX_CAR_SLOT; i++)
 80012ea:	2200      	movs	r2, #0
 80012ec:	461c      	mov	r4, r3
	{
		WM[i].st_process[ST_WAITING_FOR_START] = (void*)waiting_state_handler;
 80012ee:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8001394 <ApplicationScan+0xb0>
		WM[i].st_process[ST_FOAM]              = (void*)foam_state_handler;
 80012f2:	4f1e      	ldr	r7, [pc, #120]	; (800136c <ApplicationScan+0x88>)
		WM[i].st_process[ST_BRUSH]             = (void*)brush_state_handler;
 80012f4:	4e1e      	ldr	r6, [pc, #120]	; (8001370 <ApplicationScan+0x8c>)
		WM[i].st_process[ST_WASHING]           = (void*)washing_state_handler;
 80012f6:	4d1f      	ldr	r5, [pc, #124]	; (8001374 <ApplicationScan+0x90>)
		WM[i].st_process[ST_DRYING]            = (void*)drying_state_handler;
 80012f8:	481f      	ldr	r0, [pc, #124]	; (8001378 <ApplicationScan+0x94>)
		WM[i].st_process[ST_END_WASH]          = (void*)end_state_handler;
 80012fa:	4920      	ldr	r1, [pc, #128]	; (800137c <ApplicationScan+0x98>)
		WM[i].CarSlot = i;
 80012fc:	619a      	str	r2, [r3, #24]
	for(i = 0; i< MAX_CAR_SLOT; i++)
 80012fe:	3201      	adds	r2, #1
 8001300:	2a04      	cmp	r2, #4
		WM[i].st_process[ST_WAITING_FOR_START] = (void*)waiting_state_handler;
 8001302:	f8c3 e020 	str.w	lr, [r3, #32]
		WM[i].st_process[ST_FOAM]              = (void*)foam_state_handler;
 8001306:	625f      	str	r7, [r3, #36]	; 0x24
		WM[i].st_process[ST_BRUSH]             = (void*)brush_state_handler;
 8001308:	629e      	str	r6, [r3, #40]	; 0x28
		WM[i].st_process[ST_WASHING]           = (void*)washing_state_handler;
 800130a:	62dd      	str	r5, [r3, #44]	; 0x2c
		WM[i].st_process[ST_DRYING]            = (void*)drying_state_handler;
 800130c:	6318      	str	r0, [r3, #48]	; 0x30
		WM[i].st_process[ST_END_WASH]          = (void*)end_state_handler;
 800130e:	6359      	str	r1, [r3, #52]	; 0x34
 8001310:	f103 0338 	add.w	r3, r3, #56	; 0x38
	for(i = 0; i< MAX_CAR_SLOT; i++)
 8001314:	d1f2      	bne.n	80012fc <ApplicationScan+0x18>
 8001316:	2738      	movs	r7, #56	; 0x38
				if(NULL != WM[i].st_process[WM[i].State])
 8001318:	f04f 080e 	mov.w	r8, #14
	}
	WM[0].is_car_present = check_car_in_slot_1;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <ApplicationScan+0x9c>)
			app_start_button_pressed = ButtonGetAndConsumeEvent();
 800131e:	4e19      	ldr	r6, [pc, #100]	; (8001384 <ApplicationScan+0xa0>)
	WM[0].is_car_present = check_car_in_slot_1;
 8001320:	61e3      	str	r3, [r4, #28]
	WM[1].is_car_present = check_car_in_slot_2;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <ApplicationScan+0xa4>)
 8001324:	6563      	str	r3, [r4, #84]	; 0x54
	WM[2].is_car_present = check_car_in_slot_3;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <ApplicationScan+0xa8>)
 8001328:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	WM[3].is_car_present = check_car_in_slot_4;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <ApplicationScan+0xac>)
 800132e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		if(IsTimeReached())
 8001332:	f000 f95d 	bl	80015f0 <IsTimeReached>
 8001336:	2800      	cmp	r0, #0
 8001338:	d0fb      	beq.n	8001332 <ApplicationScan+0x4e>
			ButtonDissableInt();
 800133a:	f000 f96d 	bl	8001618 <ButtonDissableInt>
			app_start_button_pressed = ButtonGetAndConsumeEvent();
 800133e:	f000 f961 	bl	8001604 <ButtonGetAndConsumeEvent>
			for(i = 0; i< MAX_CAR_SLOT; i++)
 8001342:	2500      	movs	r5, #0
			app_start_button_pressed = ButtonGetAndConsumeEvent();
 8001344:	6030      	str	r0, [r6, #0]
			ButtonEnableInt();
 8001346:	f000 f96a 	bl	800161e <ButtonEnableInt>
 800134a:	fb07 f005 	mul.w	r0, r7, r5
				if(NULL != WM[i].st_process[WM[i].State])
 800134e:	5c23      	ldrb	r3, [r4, r0]
 8001350:	fb08 3305 	mla	r3, r8, r5, r3
 8001354:	3308      	adds	r3, #8
 8001356:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800135a:	b10b      	cbz	r3, 8001360 <ApplicationScan+0x7c>
					WM[i].st_process[WM[i].State](&WM[i]);
 800135c:	4420      	add	r0, r4
 800135e:	4798      	blx	r3
			for(i = 0; i< MAX_CAR_SLOT; i++)
 8001360:	3501      	adds	r5, #1
 8001362:	2d04      	cmp	r5, #4
 8001364:	d1f1      	bne.n	800134a <ApplicationScan+0x66>
 8001366:	e7e4      	b.n	8001332 <ApplicationScan+0x4e>
 8001368:	20000090 	.word	0x20000090
 800136c:	08001259 	.word	0x08001259
 8001370:	08001219 	.word	0x08001219
 8001374:	080011d9 	.word	0x080011d9
 8001378:	08001199 	.word	0x08001199
 800137c:	08001179 	.word	0x08001179
 8001380:	0800116d 	.word	0x0800116d
 8001384:	20000170 	.word	0x20000170
 8001388:	08001161 	.word	0x08001161
 800138c:	08001155 	.word	0x08001155
 8001390:	08001149 	.word	0x08001149
 8001394:	08001299 	.word	0x08001299

08001398 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001398:	b507      	push	{r0, r1, r2, lr}
 800139a:	a902      	add	r1, sp, #8
 800139c:	f841 0d04 	str.w	r0, [r1, #-4]!
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80013a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a4:	2201      	movs	r2, #1
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <__io_putchar+0x1c>)
 80013a8:	f7ff fe4c 	bl	8001044 <HAL_UART_Transmit>

  return ch;
}
 80013ac:	9801      	ldr	r0, [sp, #4]
 80013ae:	b003      	add	sp, #12
 80013b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b4:	2000018c 	.word	0x2000018c

080013b8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 0
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef clkinitstruct = {0};
 80013bc:	2214      	movs	r2, #20
 80013be:	2100      	movs	r1, #0
 80013c0:	a801      	add	r0, sp, #4
 80013c2:	f000 fa05 	bl	80017d0 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 80013c6:	2100      	movs	r1, #0
 80013c8:	2228      	movs	r2, #40	; 0x28
 80013ca:	a806      	add	r0, sp, #24
 80013cc:	f000 fa00 	bl	80017d0 <memset>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
  oscinitstruct.HSEState        = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 80013d4:	2201      	movs	r2, #1
  oscinitstruct.HSEState        = RCC_HSE_ON;
 80013d6:	9307      	str	r3, [sp, #28]
  oscinitstruct.HSEPredivValue  = RCC_HSE_PREDIV_DIV2;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 80013d8:	930e      	str	r3, [sp, #56]	; 0x38
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80013da:	2402      	movs	r4, #2
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL6;
 80013dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80013e0:	a806      	add	r0, sp, #24
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 80013e2:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue  = RCC_HSE_PREDIV_DIV2;
 80013e4:	9208      	str	r2, [sp, #32]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80013e6:	940d      	str	r4, [sp, #52]	; 0x34
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL6;
 80013e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80013ea:	f7ff f929 	bl	8000640 <HAL_RCC_OscConfig>
 80013ee:	4601      	mov	r1, r0
 80013f0:	b100      	cbz	r0, 80013f4 <SystemClock_Config+0x3c>
 80013f2:	e7fe      	b.n	80013f2 <SystemClock_Config+0x3a>
    while(1); 
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013f4:	230f      	movs	r3, #15
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	9003      	str	r0, [sp, #12]
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	9005      	str	r0, [sp, #20]
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80013fa:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_0)!= HAL_OK)
 80013fc:	a801      	add	r0, sp, #4
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013fe:	9301      	str	r3, [sp, #4]
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_0)!= HAL_OK)
 8001402:	f7ff faef 	bl	80009e4 <HAL_RCC_ClockConfig>
 8001406:	b100      	cbz	r0, 800140a <SystemClock_Config+0x52>
 8001408:	e7fe      	b.n	8001408 <SystemClock_Config+0x50>
  {
    /* Initialization Error */
    while(1); 
  }
}
 800140a:	b010      	add	sp, #64	; 0x40
 800140c:	bd10      	pop	{r4, pc}
	...

08001410 <main>:
{
 8001410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *  @brief Initialized additional 4 swithes for car detection simulation
 */
void Switches_Init(void)
{
	GPIO_InitTypeDef  GPIO_InitStruct;
    memset(&GPIO_InitStruct,0, sizeof(GPIO_InitTypeDef));
 8001414:	2610      	movs	r6, #16
{
 8001416:	b088      	sub	sp, #32

	  /* Init additional jumper for setting the cars */
	GPIO_PORTA_CLK_ENABLE();
 8001418:	4d67      	ldr	r5, [pc, #412]	; (80015b8 <main+0x1a8>)
  HAL_Init();
 800141a:	f7fe ff85 	bl	8000328 <HAL_Init>
  SystemClock_Config();
 800141e:	f7ff ffcb 	bl	80013b8 <SystemClock_Config>
    memset(&GPIO_InitStruct,0, sizeof(GPIO_InitTypeDef));
 8001422:	4632      	mov	r2, r6
 8001424:	2100      	movs	r1, #0
 8001426:	eb0d 0006 	add.w	r0, sp, r6
 800142a:	f000 f9d1 	bl	80017d0 <memset>
	GPIO_PORTA_CLK_ENABLE();
 800142e:	69ab      	ldr	r3, [r5, #24]
	GPIO_PORTC_CLK_ENABLE();

	/* Init outputs */
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001430:	2401      	movs	r4, #1
	GPIO_PORTA_CLK_ENABLE();
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	61ab      	str	r3, [r5, #24]
 8001438:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;


    GPIO_InitStruct.Pin = GPIO_PIN_2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	eb0d 0106 	add.w	r1, sp, r6
	GPIO_PORTA_CLK_ENABLE();
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	9b02      	ldr	r3, [sp, #8]
	GPIO_PORTC_CLK_ENABLE();
 8001446:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	485c      	ldr	r0, [pc, #368]	; (80015bc <main+0x1ac>)
	GPIO_PORTC_CLK_ENABLE();
 800144a:	4333      	orrs	r3, r6
 800144c:	61ab      	str	r3, [r5, #24]
 800144e:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001450:	9405      	str	r4, [sp, #20]
	GPIO_PORTC_CLK_ENABLE();
 8001452:	4033      	ands	r3, r6
 8001454:	9303      	str	r3, [sp, #12]
 8001456:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001458:	2304      	movs	r3, #4
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800145a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800145e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f7fe fff2 	bl	8000448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_InitStruct.Pin, 1);
 8001464:	4622      	mov	r2, r4
 8001466:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800146a:	4854      	ldr	r0, [pc, #336]	; (80015bc <main+0x1ac>)
 800146c:	f7ff f8d2 	bl	8000614 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	eb0d 0106 	add.w	r1, sp, r6
 8001474:	4851      	ldr	r0, [pc, #324]	; (80015bc <main+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001476:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f7fe ffe6 	bl	8000448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_InitStruct.Pin, 1);
 800147c:	4622      	mov	r2, r4
 800147e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8001482:	484e      	ldr	r0, [pc, #312]	; (80015bc <main+0x1ac>)
 8001484:	f7ff f8c6 	bl	8000614 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001488:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	eb0d 0106 	add.w	r1, sp, r6
 800148e:	484b      	ldr	r0, [pc, #300]	; (80015bc <main+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001490:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f7fe ffd9 	bl	8000448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_InitStruct.Pin, 1);
 8001496:	4622      	mov	r2, r4
 8001498:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800149c:	4847      	ldr	r0, [pc, #284]	; (80015bc <main+0x1ac>)
 800149e:	f7ff f8b9 	bl	8000614 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	eb0d 0106 	add.w	r1, sp, r6
 80014a6:	4846      	ldr	r0, [pc, #280]	; (80015c0 <main+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a8:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014aa:	f7fe ffcd 	bl	8000448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, GPIO_InitStruct.Pin, 1);
 80014ae:	4622      	mov	r2, r4
 80014b0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80014b4:	4842      	ldr	r0, [pc, #264]	; (80015c0 <main+0x1b0>)
 80014b6:	f7ff f8ad 	bl	8000614 <HAL_GPIO_WritePin>

    /* Initialize inputs */
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 80014ba:	2600      	movs	r6, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;

    //GPIO_InitStruct.Pin = GPIO_PIN_1;
    //HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014bc:	2308      	movs	r3, #8
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80014be:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014c0:	f04f 0820 	mov.w	r8, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	a904      	add	r1, sp, #16
 80014c6:	483d      	ldr	r0, [pc, #244]	; (80015bc <main+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c8:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 80014ca:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80014cc:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014ce:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f7fe ffba 	bl	8000448 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	a904      	add	r1, sp, #16
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <main+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014d8:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f7fe ffb4 	bl	8000448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e0:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	a904      	add	r1, sp, #16
 80014e4:	4835      	ldr	r0, [pc, #212]	; (80015bc <main+0x1ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f7fe ffae 	bl	8000448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	a904      	add	r1, sp, #16
 80014ee:	4834      	ldr	r0, [pc, #208]	; (80015c0 <main+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014f0:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f7fe ffa8 	bl	8000448 <HAL_GPIO_Init>
  BSP_LED_Init(LED4);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7fe fe89 	bl	8000210 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80014fe:	4630      	mov	r0, r6
 8001500:	f7fe fe86 	bl	8000210 <BSP_LED_Init>
static void EXTI0_IRQHandler_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	69ab      	ldr	r3, [r5, #24]

  /* Configure PA.00 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Pin = GPIO_PIN_0;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001506:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	61ab      	str	r3, [r5, #24]
 800150e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001510:	482a      	ldr	r0, [pc, #168]	; (80015bc <main+0x1ac>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <main+0x1b4>)
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800151c:	9606      	str	r6, [sp, #24]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800151e:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 8001520:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001522:	f7fe ff91 	bl	8000448 <HAL_GPIO_Init>

  /* Enable and set EXTI line 0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001526:	4632      	mov	r2, r6
 8001528:	4639      	mov	r1, r7
 800152a:	2006      	movs	r0, #6
 800152c:	f7fe ff28 	bl	8000380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001530:	2006      	movs	r0, #6
 8001532:	f7fe ff59 	bl	80003e8 <HAL_NVIC_EnableIRQ>
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8001536:	f242 7210 	movw	r2, #10000	; 0x2710
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <main+0x1b8>)
	TimHandle.Instance = TIMx;
 800153c:	4d23      	ldr	r5, [pc, #140]	; (80015cc <main+0x1bc>)
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 800153e:	681b      	ldr	r3, [r3, #0]
	if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001540:	4628      	mov	r0, r5
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8001542:	fbb3 f3f2 	udiv	r3, r3, r2
	TimHandle.Instance = TIMx;
 8001546:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <main+0x1c0>)
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8001548:	3b01      	subs	r3, #1
	TimHandle.Instance = TIMx;
 800154a:	602a      	str	r2, [r5, #0]
	TimHandle.Init.Period            = 10000 - 1;
 800154c:	f242 720f 	movw	r2, #9999	; 0x270f
	TimHandle.Init.Prescaler         = uwPrescalerValue;
 8001550:	606b      	str	r3, [r5, #4]
	TimHandle.Init.Period            = 10000 - 1;
 8001552:	60ea      	str	r2, [r5, #12]
	TimHandle.Init.ClockDivision     = 0;
 8001554:	612e      	str	r6, [r5, #16]
	TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001556:	60ae      	str	r6, [r5, #8]
	TimHandle.Init.RepetitionCounter = 0;
 8001558:	616e      	str	r6, [r5, #20]
	TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800155c:	f7ff fbde 	bl	8000d1c <HAL_TIM_Base_Init>
 8001560:	b118      	cbz	r0, 800156a <main+0x15a>
  BSP_LED_On(LED4);
 8001562:	4620      	mov	r0, r4
 8001564:	f7fe fe88 	bl	8000278 <BSP_LED_On>
 8001568:	e7fe      	b.n	8001568 <main+0x158>
	if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800156a:	4628      	mov	r0, r5
 800156c:	f7ff fad2 	bl	8000b14 <HAL_TIM_Base_Start_IT>
 8001570:	b118      	cbz	r0, 800157a <main+0x16a>
  BSP_LED_On(LED4);
 8001572:	4620      	mov	r0, r4
 8001574:	f7fe fe80 	bl	8000278 <BSP_LED_On>
 8001578:	e7fe      	b.n	8001578 <main+0x168>
	UartHandle.Init.BaudRate   = 115200;
 800157a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	UartHandle.Instance        = USARTx;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <main+0x1c4>)
	UartHandle.Init.BaudRate   = 115200;
 8001580:	4915      	ldr	r1, [pc, #84]	; (80015d8 <main+0x1c8>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	6098      	str	r0, [r3, #8]
	UartHandle.Init.BaudRate   = 115200;
 8001584:	e883 0006 	stmia.w	r3, {r1, r2}
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001588:	220c      	movs	r2, #12
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800158a:	60d8      	str	r0, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800158c:	6118      	str	r0, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800158e:	6198      	str	r0, [r3, #24]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001590:	4618      	mov	r0, r3
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001592:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001594:	f7ff fd28 	bl	8000fe8 <HAL_UART_Init>
 8001598:	4605      	mov	r5, r0
 800159a:	b118      	cbz	r0, 80015a4 <main+0x194>
  BSP_LED_On(LED4);
 800159c:	4620      	mov	r0, r4
 800159e:	f7fe fe6b 	bl	8000278 <BSP_LED_On>
 80015a2:	e7fe      	b.n	80015a2 <main+0x192>
  printf("** Welcome test car wash program ** \n\r");
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <main+0x1cc>)
 80015a6:	f000 f91b 	bl	80017e0 <iprintf>
  ApplicationScan();
 80015aa:	f7ff fe9b 	bl	80012e4 <ApplicationScan>
}
 80015ae:	4628      	mov	r0, r5
 80015b0:	b008      	add	sp, #32
 80015b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010800 	.word	0x40010800
 80015c0:	40011000 	.word	0x40011000
 80015c4:	10110000 	.word	0x10110000
 80015c8:	20000008 	.word	0x20000008
 80015cc:	200001cc 	.word	0x200001cc
 80015d0:	40000400 	.word	0x40000400
 80015d4:	2000018c 	.word	0x2000018c
 80015d8:	40013800 	.word	0x40013800
 80015dc:	080026d2 	.word	0x080026d2

080015e0 <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == GPIO_PIN_0)
 80015e0:	2801      	cmp	r0, #1
	ButtonPressed  = 1;
 80015e2:	bf04      	itt	eq
 80015e4:	4b01      	ldreq	r3, [pc, #4]	; (80015ec <HAL_GPIO_EXTI_Callback+0xc>)
 80015e6:	6018      	streq	r0, [r3, #0]
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000174 	.word	0x20000174

080015f0 <IsTimeReached>:
	if(TimeoutTicked)
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <IsTimeReached+0x10>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	b110      	cbz	r0, 80015fc <IsTimeReached+0xc>
		TimeoutTicked = 0;
 80015f6:	2200      	movs	r2, #0
		return 1;
 80015f8:	2001      	movs	r0, #1
		TimeoutTicked = 0;
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000178 	.word	0x20000178

08001604 <ButtonGetAndConsumeEvent>:
	if(ButtonPressed)
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <ButtonGetAndConsumeEvent+0x10>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	b110      	cbz	r0, 8001610 <ButtonGetAndConsumeEvent+0xc>
		ButtonPressed = 0;
 800160a:	2200      	movs	r2, #0
		return 1;
 800160c:	2001      	movs	r0, #1
		ButtonPressed = 0;
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000174 	.word	0x20000174

08001618 <ButtonDissableInt>:
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001618:	2006      	movs	r0, #6
 800161a:	f7fe bef1 	b.w	8000400 <HAL_NVIC_DisableIRQ>

0800161e <ButtonEnableInt>:
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800161e:	2006      	movs	r0, #6
 8001620:	f7fe bee2 	b.w	80003e8 <HAL_NVIC_EnableIRQ>

08001624 <HAL_TIM_PeriodElapsedCallback>:
{
 8001624:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED3);
 8001626:	2000      	movs	r0, #0
 8001628:	f7fe fe34 	bl	8000294 <BSP_LED_Toggle>
  TimeoutTicked = 1;
 800162c:	2201      	movs	r2, #1
 800162e:	4b01      	ldr	r3, [pc, #4]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	bd08      	pop	{r3, pc}
 8001634:	20000178 	.word	0x20000178

08001638 <HAL_UART_MspInit>:
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_UART_MspInit+0x6c>)
{
 800163a:	b510      	push	{r4, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 800163c:	699a      	ldr	r2, [r3, #24]
{
 800163e:	b088      	sub	sp, #32
  USARTx_TX_GPIO_CLK_ENABLE();
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	619a      	str	r2, [r3, #24]
 8001646:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001648:	4c17      	ldr	r4, [pc, #92]	; (80016a8 <HAL_UART_MspInit+0x70>)
  USARTx_TX_GPIO_CLK_ENABLE();
 800164a:	f002 0204 	and.w	r2, r2, #4
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	9a01      	ldr	r2, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001652:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001654:	a904      	add	r1, sp, #16
  USARTx_RX_GPIO_CLK_ENABLE();
 8001656:	f042 0204 	orr.w	r2, r2, #4
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800165e:	4620      	mov	r0, r4
  USARTx_RX_GPIO_CLK_ENABLE();
 8001660:	f002 0204 	and.w	r2, r2, #4
 8001664:	9202      	str	r2, [sp, #8]
 8001666:	9a02      	ldr	r2, [sp, #8]
  USARTx_CLK_ENABLE();
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800166e:	619a      	str	r2, [r3, #24]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800167a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800168c:	f7fe fedc 	bl	8000448 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001690:	f44f 6380 	mov.w	r3, #1024	; 0x400

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001694:	a904      	add	r1, sp, #16
 8001696:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001698:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800169a:	f7fe fed5 	bl	8000448 <HAL_GPIO_Init>
}
 800169e:	b008      	add	sp, #32
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010800 	.word	0x40010800

080016ac <HAL_TIM_Base_MspInit>:
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /*##-1- Enable peripheral clock #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_TIM_Base_MspInit+0x2c>)
{
 80016ae:	b507      	push	{r0, r1, r2, lr}
  TIMx_CLK_ENABLE();
 80016b0:	69da      	ldr	r2, [r3, #28]
  
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set the TIMx priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 80016b2:	2103      	movs	r1, #3
  TIMx_CLK_ENABLE();
 80016b4:	f042 0202 	orr.w	r2, r2, #2
 80016b8:	61da      	str	r2, [r3, #28]
 80016ba:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 80016bc:	2200      	movs	r2, #0
  TIMx_CLK_ENABLE();
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 80016c4:	201d      	movs	r0, #29
  TIMx_CLK_ENABLE();
 80016c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 80016c8:	f7fe fe5a 	bl	8000380 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80016cc:	201d      	movs	r0, #29
 80016ce:	f7fe fe8b 	bl	80003e8 <HAL_NVIC_EnableIRQ>
}
 80016d2:	b003      	add	sp, #12
 80016d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
 80016dc:	4770      	bx	lr

080016de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016de:	e7fe      	b.n	80016de <HardFault_Handler>

080016e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler>

080016e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler>

080016e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler>

080016e6 <SVC_Handler>:
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    HAL_IncTick();
 80016ec:	f7fe be28 	b.w	8000340 <HAL_IncTick>

080016f0 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7fe bf99 	b.w	8000628 <HAL_GPIO_EXTI_IRQHandler>
	...

080016f8 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80016f8:	4801      	ldr	r0, [pc, #4]	; (8001700 <TIM3_IRQHandler+0x8>)
 80016fa:	f7ff ba1a 	b.w	8000b32 <HAL_TIM_IRQHandler>
 80016fe:	bf00      	nop
 8001700:	200001cc 	.word	0x200001cc

08001704 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	460e      	mov	r6, r1
 8001708:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	460c      	mov	r4, r1
 800170c:	1ba3      	subs	r3, r4, r6
 800170e:	429d      	cmp	r5, r3
 8001710:	dc01      	bgt.n	8001716 <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

return len;
}
 8001712:	4628      	mov	r0, r5
 8001714:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8001716:	f3af 8000 	nop.w
 800171a:	f804 0b01 	strb.w	r0, [r4], #1
 800171e:	e7f5      	b.n	800170c <_read+0x8>

08001720 <_write>:

int _write(int file, char *ptr, int len)
{
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460e      	mov	r6, r1
 8001724:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	460c      	mov	r4, r1
 8001728:	1ba3      	subs	r3, r4, r6
 800172a:	429d      	cmp	r5, r3
 800172c:	dc01      	bgt.n	8001732 <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 800172e:	4628      	mov	r0, r5
 8001730:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 8001732:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001736:	f7ff fe2f 	bl	8001398 <__io_putchar>
 800173a:	e7f5      	b.n	8001728 <_write+0x8>

0800173c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <_sbrk+0x28>)
{
 800173e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	b909      	cbnz	r1, 8001748 <_sbrk+0xc>
		heap_end = &end;
 8001744:	4908      	ldr	r1, [pc, #32]	; (8001768 <_sbrk+0x2c>)
 8001746:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001748:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800174a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800174c:	4402      	add	r2, r0
 800174e:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001750:	bf81      	itttt	hi
 8001752:	220c      	movhi	r2, #12
 8001754:	4b05      	ldrhi	r3, [pc, #20]	; (800176c <_sbrk+0x30>)
		return (caddr_t) -1;
 8001756:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800175a:	601a      	strhi	r2, [r3, #0]
	}

	heap_end += incr;
 800175c:	bf98      	it	ls
 800175e:	601a      	strls	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000017c 	.word	0x2000017c
 8001768:	20000210 	.word	0x20000210
 800176c:	2000020c 	.word	0x2000020c

08001770 <_close>:

int _close(int file)
{
	return -1;
}
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	4770      	bx	lr

08001776 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800177a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800177c:	604b      	str	r3, [r1, #4]
}
 800177e:	4770      	bx	lr

08001780 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001780:	2001      	movs	r0, #1
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001784:	2000      	movs	r0, #0
 8001786:	4770      	bx	lr

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	2500      	movs	r5, #0
 800178c:	4e0c      	ldr	r6, [pc, #48]	; (80017c0 <__libc_init_array+0x38>)
 800178e:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <__libc_init_array+0x3c>)
 8001790:	1ba4      	subs	r4, r4, r6
 8001792:	10a4      	asrs	r4, r4, #2
 8001794:	42a5      	cmp	r5, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	f000 ff26 	bl	80025e8 <_init>
 800179c:	2500      	movs	r5, #0
 800179e:	4e0a      	ldr	r6, [pc, #40]	; (80017c8 <__libc_init_array+0x40>)
 80017a0:	4c0a      	ldr	r4, [pc, #40]	; (80017cc <__libc_init_array+0x44>)
 80017a2:	1ba4      	subs	r4, r4, r6
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	42a5      	cmp	r5, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017b0:	4798      	blx	r3
 80017b2:	3501      	adds	r5, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017ba:	4798      	blx	r3
 80017bc:	3501      	adds	r5, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	08002794 	.word	0x08002794
 80017c4:	08002794 	.word	0x08002794
 80017c8:	08002794 	.word	0x08002794
 80017cc:	08002798 	.word	0x08002798

080017d0 <memset>:
 80017d0:	4603      	mov	r3, r0
 80017d2:	4402      	add	r2, r0
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d100      	bne.n	80017da <memset+0xa>
 80017d8:	4770      	bx	lr
 80017da:	f803 1b01 	strb.w	r1, [r3], #1
 80017de:	e7f9      	b.n	80017d4 <memset+0x4>

080017e0 <iprintf>:
 80017e0:	b40f      	push	{r0, r1, r2, r3}
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <iprintf+0x2c>)
 80017e4:	b513      	push	{r0, r1, r4, lr}
 80017e6:	681c      	ldr	r4, [r3, #0]
 80017e8:	b124      	cbz	r4, 80017f4 <iprintf+0x14>
 80017ea:	69a3      	ldr	r3, [r4, #24]
 80017ec:	b913      	cbnz	r3, 80017f4 <iprintf+0x14>
 80017ee:	4620      	mov	r0, r4
 80017f0:	f000 f84e 	bl	8001890 <__sinit>
 80017f4:	ab05      	add	r3, sp, #20
 80017f6:	9a04      	ldr	r2, [sp, #16]
 80017f8:	68a1      	ldr	r1, [r4, #8]
 80017fa:	4620      	mov	r0, r4
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f000 f9a3 	bl	8001b48 <_vfiprintf_r>
 8001802:	b002      	add	sp, #8
 8001804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001808:	b004      	add	sp, #16
 800180a:	4770      	bx	lr
 800180c:	2000000c 	.word	0x2000000c

08001810 <_cleanup_r>:
 8001810:	4901      	ldr	r1, [pc, #4]	; (8001818 <_cleanup_r+0x8>)
 8001812:	f000 b8a9 	b.w	8001968 <_fwalk_reent>
 8001816:	bf00      	nop
 8001818:	08002421 	.word	0x08002421

0800181c <std.isra.0>:
 800181c:	2300      	movs	r3, #0
 800181e:	b510      	push	{r4, lr}
 8001820:	4604      	mov	r4, r0
 8001822:	6003      	str	r3, [r0, #0]
 8001824:	6043      	str	r3, [r0, #4]
 8001826:	6083      	str	r3, [r0, #8]
 8001828:	8181      	strh	r1, [r0, #12]
 800182a:	6643      	str	r3, [r0, #100]	; 0x64
 800182c:	81c2      	strh	r2, [r0, #14]
 800182e:	6103      	str	r3, [r0, #16]
 8001830:	6143      	str	r3, [r0, #20]
 8001832:	6183      	str	r3, [r0, #24]
 8001834:	4619      	mov	r1, r3
 8001836:	2208      	movs	r2, #8
 8001838:	305c      	adds	r0, #92	; 0x5c
 800183a:	f7ff ffc9 	bl	80017d0 <memset>
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <std.isra.0+0x38>)
 8001840:	6224      	str	r4, [r4, #32]
 8001842:	6263      	str	r3, [r4, #36]	; 0x24
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <std.isra.0+0x3c>)
 8001846:	62a3      	str	r3, [r4, #40]	; 0x28
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <std.isra.0+0x40>)
 800184a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <std.isra.0+0x44>)
 800184e:	6323      	str	r3, [r4, #48]	; 0x30
 8001850:	bd10      	pop	{r4, pc}
 8001852:	bf00      	nop
 8001854:	080020c5 	.word	0x080020c5
 8001858:	080020e7 	.word	0x080020e7
 800185c:	0800211f 	.word	0x0800211f
 8001860:	08002143 	.word	0x08002143

08001864 <__sfmoreglue>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	2568      	movs	r5, #104	; 0x68
 8001868:	1e4a      	subs	r2, r1, #1
 800186a:	4355      	muls	r5, r2
 800186c:	460e      	mov	r6, r1
 800186e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001872:	f000 f8e3 	bl	8001a3c <_malloc_r>
 8001876:	4604      	mov	r4, r0
 8001878:	b140      	cbz	r0, 800188c <__sfmoreglue+0x28>
 800187a:	2100      	movs	r1, #0
 800187c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001880:	300c      	adds	r0, #12
 8001882:	60a0      	str	r0, [r4, #8]
 8001884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001888:	f7ff ffa2 	bl	80017d0 <memset>
 800188c:	4620      	mov	r0, r4
 800188e:	bd70      	pop	{r4, r5, r6, pc}

08001890 <__sinit>:
 8001890:	6983      	ldr	r3, [r0, #24]
 8001892:	b510      	push	{r4, lr}
 8001894:	4604      	mov	r4, r0
 8001896:	bb33      	cbnz	r3, 80018e6 <__sinit+0x56>
 8001898:	6483      	str	r3, [r0, #72]	; 0x48
 800189a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800189c:	6503      	str	r3, [r0, #80]	; 0x50
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <__sinit+0x58>)
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <__sinit+0x5c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6282      	str	r2, [r0, #40]	; 0x28
 80018a6:	4298      	cmp	r0, r3
 80018a8:	bf04      	itt	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	6183      	streq	r3, [r0, #24]
 80018ae:	f000 f81f 	bl	80018f0 <__sfp>
 80018b2:	6060      	str	r0, [r4, #4]
 80018b4:	4620      	mov	r0, r4
 80018b6:	f000 f81b 	bl	80018f0 <__sfp>
 80018ba:	60a0      	str	r0, [r4, #8]
 80018bc:	4620      	mov	r0, r4
 80018be:	f000 f817 	bl	80018f0 <__sfp>
 80018c2:	2200      	movs	r2, #0
 80018c4:	60e0      	str	r0, [r4, #12]
 80018c6:	2104      	movs	r1, #4
 80018c8:	6860      	ldr	r0, [r4, #4]
 80018ca:	f7ff ffa7 	bl	800181c <std.isra.0>
 80018ce:	2201      	movs	r2, #1
 80018d0:	2109      	movs	r1, #9
 80018d2:	68a0      	ldr	r0, [r4, #8]
 80018d4:	f7ff ffa2 	bl	800181c <std.isra.0>
 80018d8:	2202      	movs	r2, #2
 80018da:	2112      	movs	r1, #18
 80018dc:	68e0      	ldr	r0, [r4, #12]
 80018de:	f7ff ff9d 	bl	800181c <std.isra.0>
 80018e2:	2301      	movs	r3, #1
 80018e4:	61a3      	str	r3, [r4, #24]
 80018e6:	bd10      	pop	{r4, pc}
 80018e8:	0800275c 	.word	0x0800275c
 80018ec:	08001811 	.word	0x08001811

080018f0 <__sfp>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <__sfp+0x74>)
 80018f4:	4607      	mov	r7, r0
 80018f6:	681e      	ldr	r6, [r3, #0]
 80018f8:	69b3      	ldr	r3, [r6, #24]
 80018fa:	b913      	cbnz	r3, 8001902 <__sfp+0x12>
 80018fc:	4630      	mov	r0, r6
 80018fe:	f7ff ffc7 	bl	8001890 <__sinit>
 8001902:	3648      	adds	r6, #72	; 0x48
 8001904:	68b4      	ldr	r4, [r6, #8]
 8001906:	6873      	ldr	r3, [r6, #4]
 8001908:	3b01      	subs	r3, #1
 800190a:	d503      	bpl.n	8001914 <__sfp+0x24>
 800190c:	6833      	ldr	r3, [r6, #0]
 800190e:	b133      	cbz	r3, 800191e <__sfp+0x2e>
 8001910:	6836      	ldr	r6, [r6, #0]
 8001912:	e7f7      	b.n	8001904 <__sfp+0x14>
 8001914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001918:	b16d      	cbz	r5, 8001936 <__sfp+0x46>
 800191a:	3468      	adds	r4, #104	; 0x68
 800191c:	e7f4      	b.n	8001908 <__sfp+0x18>
 800191e:	2104      	movs	r1, #4
 8001920:	4638      	mov	r0, r7
 8001922:	f7ff ff9f 	bl	8001864 <__sfmoreglue>
 8001926:	6030      	str	r0, [r6, #0]
 8001928:	2800      	cmp	r0, #0
 800192a:	d1f1      	bne.n	8001910 <__sfp+0x20>
 800192c:	230c      	movs	r3, #12
 800192e:	4604      	mov	r4, r0
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4620      	mov	r0, r4
 8001934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193a:	81e3      	strh	r3, [r4, #14]
 800193c:	2301      	movs	r3, #1
 800193e:	6665      	str	r5, [r4, #100]	; 0x64
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	6025      	str	r5, [r4, #0]
 8001944:	60a5      	str	r5, [r4, #8]
 8001946:	6065      	str	r5, [r4, #4]
 8001948:	6125      	str	r5, [r4, #16]
 800194a:	6165      	str	r5, [r4, #20]
 800194c:	61a5      	str	r5, [r4, #24]
 800194e:	2208      	movs	r2, #8
 8001950:	4629      	mov	r1, r5
 8001952:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001956:	f7ff ff3b 	bl	80017d0 <memset>
 800195a:	6365      	str	r5, [r4, #52]	; 0x34
 800195c:	63a5      	str	r5, [r4, #56]	; 0x38
 800195e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001960:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001962:	e7e6      	b.n	8001932 <__sfp+0x42>
 8001964:	0800275c 	.word	0x0800275c

08001968 <_fwalk_reent>:
 8001968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800196c:	4680      	mov	r8, r0
 800196e:	4689      	mov	r9, r1
 8001970:	2600      	movs	r6, #0
 8001972:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001976:	b914      	cbnz	r4, 800197e <_fwalk_reent+0x16>
 8001978:	4630      	mov	r0, r6
 800197a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800197e:	68a5      	ldr	r5, [r4, #8]
 8001980:	6867      	ldr	r7, [r4, #4]
 8001982:	3f01      	subs	r7, #1
 8001984:	d501      	bpl.n	800198a <_fwalk_reent+0x22>
 8001986:	6824      	ldr	r4, [r4, #0]
 8001988:	e7f5      	b.n	8001976 <_fwalk_reent+0xe>
 800198a:	89ab      	ldrh	r3, [r5, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d907      	bls.n	80019a0 <_fwalk_reent+0x38>
 8001990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001994:	3301      	adds	r3, #1
 8001996:	d003      	beq.n	80019a0 <_fwalk_reent+0x38>
 8001998:	4629      	mov	r1, r5
 800199a:	4640      	mov	r0, r8
 800199c:	47c8      	blx	r9
 800199e:	4306      	orrs	r6, r0
 80019a0:	3568      	adds	r5, #104	; 0x68
 80019a2:	e7ee      	b.n	8001982 <_fwalk_reent+0x1a>

080019a4 <_free_r>:
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4605      	mov	r5, r0
 80019a8:	2900      	cmp	r1, #0
 80019aa:	d043      	beq.n	8001a34 <_free_r+0x90>
 80019ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019b0:	1f0c      	subs	r4, r1, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bfb8      	it	lt
 80019b6:	18e4      	addlt	r4, r4, r3
 80019b8:	f000 fde0 	bl	800257c <__malloc_lock>
 80019bc:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <_free_r+0x94>)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	4610      	mov	r0, r2
 80019c2:	b933      	cbnz	r3, 80019d2 <_free_r+0x2e>
 80019c4:	6063      	str	r3, [r4, #4]
 80019c6:	6014      	str	r4, [r2, #0]
 80019c8:	4628      	mov	r0, r5
 80019ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ce:	f000 bdd6 	b.w	800257e <__malloc_unlock>
 80019d2:	42a3      	cmp	r3, r4
 80019d4:	d90b      	bls.n	80019ee <_free_r+0x4a>
 80019d6:	6821      	ldr	r1, [r4, #0]
 80019d8:	1862      	adds	r2, r4, r1
 80019da:	4293      	cmp	r3, r2
 80019dc:	bf01      	itttt	eq
 80019de:	681a      	ldreq	r2, [r3, #0]
 80019e0:	685b      	ldreq	r3, [r3, #4]
 80019e2:	1852      	addeq	r2, r2, r1
 80019e4:	6022      	streq	r2, [r4, #0]
 80019e6:	6063      	str	r3, [r4, #4]
 80019e8:	6004      	str	r4, [r0, #0]
 80019ea:	e7ed      	b.n	80019c8 <_free_r+0x24>
 80019ec:	4613      	mov	r3, r2
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	b10a      	cbz	r2, 80019f6 <_free_r+0x52>
 80019f2:	42a2      	cmp	r2, r4
 80019f4:	d9fa      	bls.n	80019ec <_free_r+0x48>
 80019f6:	6819      	ldr	r1, [r3, #0]
 80019f8:	1858      	adds	r0, r3, r1
 80019fa:	42a0      	cmp	r0, r4
 80019fc:	d10b      	bne.n	8001a16 <_free_r+0x72>
 80019fe:	6820      	ldr	r0, [r4, #0]
 8001a00:	4401      	add	r1, r0
 8001a02:	1858      	adds	r0, r3, r1
 8001a04:	4282      	cmp	r2, r0
 8001a06:	6019      	str	r1, [r3, #0]
 8001a08:	d1de      	bne.n	80019c8 <_free_r+0x24>
 8001a0a:	6810      	ldr	r0, [r2, #0]
 8001a0c:	6852      	ldr	r2, [r2, #4]
 8001a0e:	4401      	add	r1, r0
 8001a10:	6019      	str	r1, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	e7d8      	b.n	80019c8 <_free_r+0x24>
 8001a16:	d902      	bls.n	8001a1e <_free_r+0x7a>
 8001a18:	230c      	movs	r3, #12
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	e7d4      	b.n	80019c8 <_free_r+0x24>
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	1821      	adds	r1, r4, r0
 8001a22:	428a      	cmp	r2, r1
 8001a24:	bf01      	itttt	eq
 8001a26:	6811      	ldreq	r1, [r2, #0]
 8001a28:	6852      	ldreq	r2, [r2, #4]
 8001a2a:	1809      	addeq	r1, r1, r0
 8001a2c:	6021      	streq	r1, [r4, #0]
 8001a2e:	6062      	str	r2, [r4, #4]
 8001a30:	605c      	str	r4, [r3, #4]
 8001a32:	e7c9      	b.n	80019c8 <_free_r+0x24>
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
 8001a36:	bf00      	nop
 8001a38:	20000180 	.word	0x20000180

08001a3c <_malloc_r>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	1ccd      	adds	r5, r1, #3
 8001a40:	f025 0503 	bic.w	r5, r5, #3
 8001a44:	3508      	adds	r5, #8
 8001a46:	2d0c      	cmp	r5, #12
 8001a48:	bf38      	it	cc
 8001a4a:	250c      	movcc	r5, #12
 8001a4c:	2d00      	cmp	r5, #0
 8001a4e:	4606      	mov	r6, r0
 8001a50:	db01      	blt.n	8001a56 <_malloc_r+0x1a>
 8001a52:	42a9      	cmp	r1, r5
 8001a54:	d903      	bls.n	8001a5e <_malloc_r+0x22>
 8001a56:	230c      	movs	r3, #12
 8001a58:	6033      	str	r3, [r6, #0]
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
 8001a5e:	f000 fd8d 	bl	800257c <__malloc_lock>
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <_malloc_r+0xb4>)
 8001a64:	6814      	ldr	r4, [r2, #0]
 8001a66:	4621      	mov	r1, r4
 8001a68:	b991      	cbnz	r1, 8001a90 <_malloc_r+0x54>
 8001a6a:	4c22      	ldr	r4, [pc, #136]	; (8001af4 <_malloc_r+0xb8>)
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	b91b      	cbnz	r3, 8001a78 <_malloc_r+0x3c>
 8001a70:	4630      	mov	r0, r6
 8001a72:	f000 fb17 	bl	80020a4 <_sbrk_r>
 8001a76:	6020      	str	r0, [r4, #0]
 8001a78:	4629      	mov	r1, r5
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f000 fb12 	bl	80020a4 <_sbrk_r>
 8001a80:	1c43      	adds	r3, r0, #1
 8001a82:	d126      	bne.n	8001ad2 <_malloc_r+0x96>
 8001a84:	230c      	movs	r3, #12
 8001a86:	4630      	mov	r0, r6
 8001a88:	6033      	str	r3, [r6, #0]
 8001a8a:	f000 fd78 	bl	800257e <__malloc_unlock>
 8001a8e:	e7e4      	b.n	8001a5a <_malloc_r+0x1e>
 8001a90:	680b      	ldr	r3, [r1, #0]
 8001a92:	1b5b      	subs	r3, r3, r5
 8001a94:	d41a      	bmi.n	8001acc <_malloc_r+0x90>
 8001a96:	2b0b      	cmp	r3, #11
 8001a98:	d90f      	bls.n	8001aba <_malloc_r+0x7e>
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	18cc      	adds	r4, r1, r3
 8001a9e:	50cd      	str	r5, [r1, r3]
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f000 fd6c 	bl	800257e <__malloc_unlock>
 8001aa6:	f104 000b 	add.w	r0, r4, #11
 8001aaa:	1d23      	adds	r3, r4, #4
 8001aac:	f020 0007 	bic.w	r0, r0, #7
 8001ab0:	1ac3      	subs	r3, r0, r3
 8001ab2:	d01b      	beq.n	8001aec <_malloc_r+0xb0>
 8001ab4:	425a      	negs	r2, r3
 8001ab6:	50e2      	str	r2, [r4, r3]
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
 8001aba:	428c      	cmp	r4, r1
 8001abc:	bf0b      	itete	eq
 8001abe:	6863      	ldreq	r3, [r4, #4]
 8001ac0:	684b      	ldrne	r3, [r1, #4]
 8001ac2:	6013      	streq	r3, [r2, #0]
 8001ac4:	6063      	strne	r3, [r4, #4]
 8001ac6:	bf18      	it	ne
 8001ac8:	460c      	movne	r4, r1
 8001aca:	e7e9      	b.n	8001aa0 <_malloc_r+0x64>
 8001acc:	460c      	mov	r4, r1
 8001ace:	6849      	ldr	r1, [r1, #4]
 8001ad0:	e7ca      	b.n	8001a68 <_malloc_r+0x2c>
 8001ad2:	1cc4      	adds	r4, r0, #3
 8001ad4:	f024 0403 	bic.w	r4, r4, #3
 8001ad8:	42a0      	cmp	r0, r4
 8001ada:	d005      	beq.n	8001ae8 <_malloc_r+0xac>
 8001adc:	1a21      	subs	r1, r4, r0
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f000 fae0 	bl	80020a4 <_sbrk_r>
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	d0cd      	beq.n	8001a84 <_malloc_r+0x48>
 8001ae8:	6025      	str	r5, [r4, #0]
 8001aea:	e7d9      	b.n	8001aa0 <_malloc_r+0x64>
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
 8001aee:	bf00      	nop
 8001af0:	20000180 	.word	0x20000180
 8001af4:	20000184 	.word	0x20000184

08001af8 <__sfputc_r>:
 8001af8:	6893      	ldr	r3, [r2, #8]
 8001afa:	b410      	push	{r4}
 8001afc:	3b01      	subs	r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	6093      	str	r3, [r2, #8]
 8001b02:	da08      	bge.n	8001b16 <__sfputc_r+0x1e>
 8001b04:	6994      	ldr	r4, [r2, #24]
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	db02      	blt.n	8001b10 <__sfputc_r+0x18>
 8001b0a:	b2cb      	uxtb	r3, r1
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d102      	bne.n	8001b16 <__sfputc_r+0x1e>
 8001b10:	bc10      	pop	{r4}
 8001b12:	f000 bb1b 	b.w	800214c <__swbuf_r>
 8001b16:	6813      	ldr	r3, [r2, #0]
 8001b18:	1c58      	adds	r0, r3, #1
 8001b1a:	6010      	str	r0, [r2, #0]
 8001b1c:	7019      	strb	r1, [r3, #0]
 8001b1e:	b2c8      	uxtb	r0, r1
 8001b20:	bc10      	pop	{r4}
 8001b22:	4770      	bx	lr

08001b24 <__sfputs_r>:
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	4606      	mov	r6, r0
 8001b28:	460f      	mov	r7, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	18d5      	adds	r5, r2, r3
 8001b2e:	42ac      	cmp	r4, r5
 8001b30:	d101      	bne.n	8001b36 <__sfputs_r+0x12>
 8001b32:	2000      	movs	r0, #0
 8001b34:	e007      	b.n	8001b46 <__sfputs_r+0x22>
 8001b36:	463a      	mov	r2, r7
 8001b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f7ff ffdb 	bl	8001af8 <__sfputc_r>
 8001b42:	1c43      	adds	r3, r0, #1
 8001b44:	d1f3      	bne.n	8001b2e <__sfputs_r+0xa>
 8001b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b48 <_vfiprintf_r>:
 8001b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b4c:	b09d      	sub	sp, #116	; 0x74
 8001b4e:	460c      	mov	r4, r1
 8001b50:	4617      	mov	r7, r2
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	4606      	mov	r6, r0
 8001b56:	b118      	cbz	r0, 8001b60 <_vfiprintf_r+0x18>
 8001b58:	6983      	ldr	r3, [r0, #24]
 8001b5a:	b90b      	cbnz	r3, 8001b60 <_vfiprintf_r+0x18>
 8001b5c:	f7ff fe98 	bl	8001890 <__sinit>
 8001b60:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <_vfiprintf_r+0x20c>)
 8001b62:	429c      	cmp	r4, r3
 8001b64:	d157      	bne.n	8001c16 <_vfiprintf_r+0xce>
 8001b66:	6874      	ldr	r4, [r6, #4]
 8001b68:	89a3      	ldrh	r3, [r4, #12]
 8001b6a:	0718      	lsls	r0, r3, #28
 8001b6c:	d55d      	bpl.n	8001c2a <_vfiprintf_r+0xe2>
 8001b6e:	6923      	ldr	r3, [r4, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05a      	beq.n	8001c2a <_vfiprintf_r+0xe2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	9309      	str	r3, [sp, #36]	; 0x24
 8001b78:	2320      	movs	r3, #32
 8001b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b7e:	2330      	movs	r3, #48	; 0x30
 8001b80:	f04f 0b01 	mov.w	fp, #1
 8001b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b88:	46b8      	mov	r8, r7
 8001b8a:	4645      	mov	r5, r8
 8001b8c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d155      	bne.n	8001c40 <_vfiprintf_r+0xf8>
 8001b94:	ebb8 0a07 	subs.w	sl, r8, r7
 8001b98:	d00b      	beq.n	8001bb2 <_vfiprintf_r+0x6a>
 8001b9a:	4653      	mov	r3, sl
 8001b9c:	463a      	mov	r2, r7
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f7ff ffbf 	bl	8001b24 <__sfputs_r>
 8001ba6:	3001      	adds	r0, #1
 8001ba8:	f000 80c4 	beq.w	8001d34 <_vfiprintf_r+0x1ec>
 8001bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bae:	4453      	add	r3, sl
 8001bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8001bb2:	f898 3000 	ldrb.w	r3, [r8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80bc 	beq.w	8001d34 <_vfiprintf_r+0x1ec>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc2:	9304      	str	r3, [sp, #16]
 8001bc4:	9307      	str	r3, [sp, #28]
 8001bc6:	9205      	str	r2, [sp, #20]
 8001bc8:	9306      	str	r3, [sp, #24]
 8001bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bce:	931a      	str	r3, [sp, #104]	; 0x68
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	7829      	ldrb	r1, [r5, #0]
 8001bd4:	4860      	ldr	r0, [pc, #384]	; (8001d58 <_vfiprintf_r+0x210>)
 8001bd6:	f000 fcc3 	bl	8002560 <memchr>
 8001bda:	f105 0801 	add.w	r8, r5, #1
 8001bde:	9b04      	ldr	r3, [sp, #16]
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d131      	bne.n	8001c48 <_vfiprintf_r+0x100>
 8001be4:	06d9      	lsls	r1, r3, #27
 8001be6:	bf44      	itt	mi
 8001be8:	2220      	movmi	r2, #32
 8001bea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001bee:	071a      	lsls	r2, r3, #28
 8001bf0:	bf44      	itt	mi
 8001bf2:	222b      	movmi	r2, #43	; 0x2b
 8001bf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001bf8:	782a      	ldrb	r2, [r5, #0]
 8001bfa:	2a2a      	cmp	r2, #42	; 0x2a
 8001bfc:	d02c      	beq.n	8001c58 <_vfiprintf_r+0x110>
 8001bfe:	2100      	movs	r1, #0
 8001c00:	200a      	movs	r0, #10
 8001c02:	9a07      	ldr	r2, [sp, #28]
 8001c04:	46a8      	mov	r8, r5
 8001c06:	f898 3000 	ldrb.w	r3, [r8]
 8001c0a:	3501      	adds	r5, #1
 8001c0c:	3b30      	subs	r3, #48	; 0x30
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	d96d      	bls.n	8001cee <_vfiprintf_r+0x1a6>
 8001c12:	b371      	cbz	r1, 8001c72 <_vfiprintf_r+0x12a>
 8001c14:	e026      	b.n	8001c64 <_vfiprintf_r+0x11c>
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <_vfiprintf_r+0x214>)
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	d101      	bne.n	8001c20 <_vfiprintf_r+0xd8>
 8001c1c:	68b4      	ldr	r4, [r6, #8]
 8001c1e:	e7a3      	b.n	8001b68 <_vfiprintf_r+0x20>
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <_vfiprintf_r+0x218>)
 8001c22:	429c      	cmp	r4, r3
 8001c24:	bf08      	it	eq
 8001c26:	68f4      	ldreq	r4, [r6, #12]
 8001c28:	e79e      	b.n	8001b68 <_vfiprintf_r+0x20>
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f000 faf1 	bl	8002214 <__swsetup_r>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d09e      	beq.n	8001b74 <_vfiprintf_r+0x2c>
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3a:	b01d      	add	sp, #116	; 0x74
 8001c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c40:	2b25      	cmp	r3, #37	; 0x25
 8001c42:	d0a7      	beq.n	8001b94 <_vfiprintf_r+0x4c>
 8001c44:	46a8      	mov	r8, r5
 8001c46:	e7a0      	b.n	8001b8a <_vfiprintf_r+0x42>
 8001c48:	4a43      	ldr	r2, [pc, #268]	; (8001d58 <_vfiprintf_r+0x210>)
 8001c4a:	4645      	mov	r5, r8
 8001c4c:	1a80      	subs	r0, r0, r2
 8001c4e:	fa0b f000 	lsl.w	r0, fp, r0
 8001c52:	4318      	orrs	r0, r3
 8001c54:	9004      	str	r0, [sp, #16]
 8001c56:	e7bb      	b.n	8001bd0 <_vfiprintf_r+0x88>
 8001c58:	9a03      	ldr	r2, [sp, #12]
 8001c5a:	1d11      	adds	r1, r2, #4
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	9103      	str	r1, [sp, #12]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	db01      	blt.n	8001c68 <_vfiprintf_r+0x120>
 8001c64:	9207      	str	r2, [sp, #28]
 8001c66:	e004      	b.n	8001c72 <_vfiprintf_r+0x12a>
 8001c68:	4252      	negs	r2, r2
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	9207      	str	r2, [sp, #28]
 8001c70:	9304      	str	r3, [sp, #16]
 8001c72:	f898 3000 	ldrb.w	r3, [r8]
 8001c76:	2b2e      	cmp	r3, #46	; 0x2e
 8001c78:	d110      	bne.n	8001c9c <_vfiprintf_r+0x154>
 8001c7a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001c7e:	f108 0101 	add.w	r1, r8, #1
 8001c82:	2b2a      	cmp	r3, #42	; 0x2a
 8001c84:	d137      	bne.n	8001cf6 <_vfiprintf_r+0x1ae>
 8001c86:	9b03      	ldr	r3, [sp, #12]
 8001c88:	f108 0802 	add.w	r8, r8, #2
 8001c8c:	1d1a      	adds	r2, r3, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	9203      	str	r2, [sp, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bfb8      	it	lt
 8001c96:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c9a:	9305      	str	r3, [sp, #20]
 8001c9c:	4d31      	ldr	r5, [pc, #196]	; (8001d64 <_vfiprintf_r+0x21c>)
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f898 1000 	ldrb.w	r1, [r8]
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 fc5b 	bl	8002560 <memchr>
 8001caa:	b140      	cbz	r0, 8001cbe <_vfiprintf_r+0x176>
 8001cac:	2340      	movs	r3, #64	; 0x40
 8001cae:	1b40      	subs	r0, r0, r5
 8001cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	f108 0801 	add.w	r8, r8, #1
 8001cba:	4303      	orrs	r3, r0
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	f898 1000 	ldrb.w	r1, [r8]
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	4828      	ldr	r0, [pc, #160]	; (8001d68 <_vfiprintf_r+0x220>)
 8001cc6:	f108 0701 	add.w	r7, r8, #1
 8001cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cce:	f000 fc47 	bl	8002560 <memchr>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d034      	beq.n	8001d40 <_vfiprintf_r+0x1f8>
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <_vfiprintf_r+0x224>)
 8001cd8:	bb03      	cbnz	r3, 8001d1c <_vfiprintf_r+0x1d4>
 8001cda:	9b03      	ldr	r3, [sp, #12]
 8001cdc:	3307      	adds	r3, #7
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	9303      	str	r3, [sp, #12]
 8001ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ce8:	444b      	add	r3, r9
 8001cea:	9309      	str	r3, [sp, #36]	; 0x24
 8001cec:	e74c      	b.n	8001b88 <_vfiprintf_r+0x40>
 8001cee:	fb00 3202 	mla	r2, r0, r2, r3
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	e786      	b.n	8001c04 <_vfiprintf_r+0xbc>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	250a      	movs	r5, #10
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	9305      	str	r3, [sp, #20]
 8001cfe:	4688      	mov	r8, r1
 8001d00:	f898 2000 	ldrb.w	r2, [r8]
 8001d04:	3101      	adds	r1, #1
 8001d06:	3a30      	subs	r2, #48	; 0x30
 8001d08:	2a09      	cmp	r2, #9
 8001d0a:	d903      	bls.n	8001d14 <_vfiprintf_r+0x1cc>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0c5      	beq.n	8001c9c <_vfiprintf_r+0x154>
 8001d10:	9005      	str	r0, [sp, #20]
 8001d12:	e7c3      	b.n	8001c9c <_vfiprintf_r+0x154>
 8001d14:	fb05 2000 	mla	r0, r5, r0, r2
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e7f0      	b.n	8001cfe <_vfiprintf_r+0x1b6>
 8001d1c:	ab03      	add	r3, sp, #12
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4622      	mov	r2, r4
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_vfiprintf_r+0x228>)
 8001d24:	a904      	add	r1, sp, #16
 8001d26:	4630      	mov	r0, r6
 8001d28:	f3af 8000 	nop.w
 8001d2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d30:	4681      	mov	r9, r0
 8001d32:	d1d8      	bne.n	8001ce6 <_vfiprintf_r+0x19e>
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	065b      	lsls	r3, r3, #25
 8001d38:	f53f af7d 	bmi.w	8001c36 <_vfiprintf_r+0xee>
 8001d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d3e:	e77c      	b.n	8001c3a <_vfiprintf_r+0xf2>
 8001d40:	ab03      	add	r3, sp, #12
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4622      	mov	r2, r4
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <_vfiprintf_r+0x228>)
 8001d48:	a904      	add	r1, sp, #16
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f000 f88a 	bl	8001e64 <_printf_i>
 8001d50:	e7ec      	b.n	8001d2c <_vfiprintf_r+0x1e4>
 8001d52:	bf00      	nop
 8001d54:	0800271c 	.word	0x0800271c
 8001d58:	08002760 	.word	0x08002760
 8001d5c:	0800273c 	.word	0x0800273c
 8001d60:	080026fc 	.word	0x080026fc
 8001d64:	08002766 	.word	0x08002766
 8001d68:	0800276a 	.word	0x0800276a
 8001d6c:	00000000 	.word	0x00000000
 8001d70:	08001b25 	.word	0x08001b25

08001d74 <_printf_common>:
 8001d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d78:	4691      	mov	r9, r2
 8001d7a:	461f      	mov	r7, r3
 8001d7c:	688a      	ldr	r2, [r1, #8]
 8001d7e:	690b      	ldr	r3, [r1, #16]
 8001d80:	4606      	mov	r6, r0
 8001d82:	4293      	cmp	r3, r2
 8001d84:	bfb8      	it	lt
 8001d86:	4613      	movlt	r3, r2
 8001d88:	f8c9 3000 	str.w	r3, [r9]
 8001d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d90:	460c      	mov	r4, r1
 8001d92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d96:	b112      	cbz	r2, 8001d9e <_printf_common+0x2a>
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c9 3000 	str.w	r3, [r9]
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	0699      	lsls	r1, r3, #26
 8001da2:	bf42      	ittt	mi
 8001da4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001da8:	3302      	addmi	r3, #2
 8001daa:	f8c9 3000 	strmi.w	r3, [r9]
 8001dae:	6825      	ldr	r5, [r4, #0]
 8001db0:	f015 0506 	ands.w	r5, r5, #6
 8001db4:	d107      	bne.n	8001dc6 <_printf_common+0x52>
 8001db6:	f104 0a19 	add.w	sl, r4, #25
 8001dba:	68e3      	ldr	r3, [r4, #12]
 8001dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	429d      	cmp	r5, r3
 8001dc4:	db2a      	blt.n	8001e1c <_printf_common+0xa8>
 8001dc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	3300      	adds	r3, #0
 8001dce:	bf18      	it	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	0692      	lsls	r2, r2, #26
 8001dd4:	d42f      	bmi.n	8001e36 <_printf_common+0xc2>
 8001dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dda:	4639      	mov	r1, r7
 8001ddc:	4630      	mov	r0, r6
 8001dde:	47c0      	blx	r8
 8001de0:	3001      	adds	r0, #1
 8001de2:	d022      	beq.n	8001e2a <_printf_common+0xb6>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	68e5      	ldr	r5, [r4, #12]
 8001de8:	f003 0306 	and.w	r3, r3, #6
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	bf18      	it	ne
 8001df0:	2500      	movne	r5, #0
 8001df2:	f8d9 2000 	ldr.w	r2, [r9]
 8001df6:	f04f 0900 	mov.w	r9, #0
 8001dfa:	bf08      	it	eq
 8001dfc:	1aad      	subeq	r5, r5, r2
 8001dfe:	68a3      	ldr	r3, [r4, #8]
 8001e00:	6922      	ldr	r2, [r4, #16]
 8001e02:	bf08      	it	eq
 8001e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bfc4      	itt	gt
 8001e0c:	1a9b      	subgt	r3, r3, r2
 8001e0e:	18ed      	addgt	r5, r5, r3
 8001e10:	341a      	adds	r4, #26
 8001e12:	454d      	cmp	r5, r9
 8001e14:	d11b      	bne.n	8001e4e <_printf_common+0xda>
 8001e16:	2000      	movs	r0, #0
 8001e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	4652      	mov	r2, sl
 8001e20:	4639      	mov	r1, r7
 8001e22:	4630      	mov	r0, r6
 8001e24:	47c0      	blx	r8
 8001e26:	3001      	adds	r0, #1
 8001e28:	d103      	bne.n	8001e32 <_printf_common+0xbe>
 8001e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e32:	3501      	adds	r5, #1
 8001e34:	e7c1      	b.n	8001dba <_printf_common+0x46>
 8001e36:	2030      	movs	r0, #48	; 0x30
 8001e38:	18e1      	adds	r1, r4, r3
 8001e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e44:	4422      	add	r2, r4
 8001e46:	3302      	adds	r3, #2
 8001e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e4c:	e7c3      	b.n	8001dd6 <_printf_common+0x62>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	4622      	mov	r2, r4
 8001e52:	4639      	mov	r1, r7
 8001e54:	4630      	mov	r0, r6
 8001e56:	47c0      	blx	r8
 8001e58:	3001      	adds	r0, #1
 8001e5a:	d0e6      	beq.n	8001e2a <_printf_common+0xb6>
 8001e5c:	f109 0901 	add.w	r9, r9, #1
 8001e60:	e7d7      	b.n	8001e12 <_printf_common+0x9e>
	...

08001e64 <_printf_i>:
 8001e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e68:	4617      	mov	r7, r2
 8001e6a:	7e0a      	ldrb	r2, [r1, #24]
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	2a6e      	cmp	r2, #110	; 0x6e
 8001e70:	4698      	mov	r8, r3
 8001e72:	4606      	mov	r6, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001e7c:	f000 80bc 	beq.w	8001ff8 <_printf_i+0x194>
 8001e80:	d81a      	bhi.n	8001eb8 <_printf_i+0x54>
 8001e82:	2a63      	cmp	r2, #99	; 0x63
 8001e84:	d02e      	beq.n	8001ee4 <_printf_i+0x80>
 8001e86:	d80a      	bhi.n	8001e9e <_printf_i+0x3a>
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	f000 80c8 	beq.w	800201e <_printf_i+0x1ba>
 8001e8e:	2a58      	cmp	r2, #88	; 0x58
 8001e90:	f000 808a 	beq.w	8001fa8 <_printf_i+0x144>
 8001e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001e9c:	e02a      	b.n	8001ef4 <_printf_i+0x90>
 8001e9e:	2a64      	cmp	r2, #100	; 0x64
 8001ea0:	d001      	beq.n	8001ea6 <_printf_i+0x42>
 8001ea2:	2a69      	cmp	r2, #105	; 0x69
 8001ea4:	d1f6      	bne.n	8001e94 <_printf_i+0x30>
 8001ea6:	6821      	ldr	r1, [r4, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001eae:	d023      	beq.n	8001ef8 <_printf_i+0x94>
 8001eb0:	1d11      	adds	r1, r2, #4
 8001eb2:	6019      	str	r1, [r3, #0]
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	e027      	b.n	8001f08 <_printf_i+0xa4>
 8001eb8:	2a73      	cmp	r2, #115	; 0x73
 8001eba:	f000 80b4 	beq.w	8002026 <_printf_i+0x1c2>
 8001ebe:	d808      	bhi.n	8001ed2 <_printf_i+0x6e>
 8001ec0:	2a6f      	cmp	r2, #111	; 0x6f
 8001ec2:	d02a      	beq.n	8001f1a <_printf_i+0xb6>
 8001ec4:	2a70      	cmp	r2, #112	; 0x70
 8001ec6:	d1e5      	bne.n	8001e94 <_printf_i+0x30>
 8001ec8:	680a      	ldr	r2, [r1, #0]
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	600a      	str	r2, [r1, #0]
 8001ed0:	e003      	b.n	8001eda <_printf_i+0x76>
 8001ed2:	2a75      	cmp	r2, #117	; 0x75
 8001ed4:	d021      	beq.n	8001f1a <_printf_i+0xb6>
 8001ed6:	2a78      	cmp	r2, #120	; 0x78
 8001ed8:	d1dc      	bne.n	8001e94 <_printf_i+0x30>
 8001eda:	2278      	movs	r2, #120	; 0x78
 8001edc:	496f      	ldr	r1, [pc, #444]	; (800209c <_printf_i+0x238>)
 8001ede:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001ee2:	e064      	b.n	8001fae <_printf_i+0x14a>
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001eea:	1d11      	adds	r1, r2, #4
 8001eec:	6019      	str	r1, [r3, #0]
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0a3      	b.n	8002040 <_printf_i+0x1dc>
 8001ef8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001efc:	f102 0104 	add.w	r1, r2, #4
 8001f00:	6019      	str	r1, [r3, #0]
 8001f02:	d0d7      	beq.n	8001eb4 <_printf_i+0x50>
 8001f04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da03      	bge.n	8001f14 <_printf_i+0xb0>
 8001f0c:	222d      	movs	r2, #45	; 0x2d
 8001f0e:	425b      	negs	r3, r3
 8001f10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f14:	4962      	ldr	r1, [pc, #392]	; (80020a0 <_printf_i+0x23c>)
 8001f16:	220a      	movs	r2, #10
 8001f18:	e017      	b.n	8001f4a <_printf_i+0xe6>
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f22:	d003      	beq.n	8001f2c <_printf_i+0xc8>
 8001f24:	1d08      	adds	r0, r1, #4
 8001f26:	6018      	str	r0, [r3, #0]
 8001f28:	680b      	ldr	r3, [r1, #0]
 8001f2a:	e006      	b.n	8001f3a <_printf_i+0xd6>
 8001f2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f30:	f101 0004 	add.w	r0, r1, #4
 8001f34:	6018      	str	r0, [r3, #0]
 8001f36:	d0f7      	beq.n	8001f28 <_printf_i+0xc4>
 8001f38:	880b      	ldrh	r3, [r1, #0]
 8001f3a:	2a6f      	cmp	r2, #111	; 0x6f
 8001f3c:	bf14      	ite	ne
 8001f3e:	220a      	movne	r2, #10
 8001f40:	2208      	moveq	r2, #8
 8001f42:	4957      	ldr	r1, [pc, #348]	; (80020a0 <_printf_i+0x23c>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f4a:	6865      	ldr	r5, [r4, #4]
 8001f4c:	2d00      	cmp	r5, #0
 8001f4e:	60a5      	str	r5, [r4, #8]
 8001f50:	f2c0 809c 	blt.w	800208c <_printf_i+0x228>
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	f020 0004 	bic.w	r0, r0, #4
 8001f5a:	6020      	str	r0, [r4, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13f      	bne.n	8001fe0 <_printf_i+0x17c>
 8001f60:	2d00      	cmp	r5, #0
 8001f62:	f040 8095 	bne.w	8002090 <_printf_i+0x22c>
 8001f66:	4675      	mov	r5, lr
 8001f68:	2a08      	cmp	r2, #8
 8001f6a:	d10b      	bne.n	8001f84 <_printf_i+0x120>
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	07da      	lsls	r2, r3, #31
 8001f70:	d508      	bpl.n	8001f84 <_printf_i+0x120>
 8001f72:	6923      	ldr	r3, [r4, #16]
 8001f74:	6862      	ldr	r2, [r4, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	bfde      	ittt	le
 8001f7a:	2330      	movle	r3, #48	; 0x30
 8001f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f84:	ebae 0305 	sub.w	r3, lr, r5
 8001f88:	6123      	str	r3, [r4, #16]
 8001f8a:	f8cd 8000 	str.w	r8, [sp]
 8001f8e:	463b      	mov	r3, r7
 8001f90:	aa03      	add	r2, sp, #12
 8001f92:	4621      	mov	r1, r4
 8001f94:	4630      	mov	r0, r6
 8001f96:	f7ff feed 	bl	8001d74 <_printf_common>
 8001f9a:	3001      	adds	r0, #1
 8001f9c:	d155      	bne.n	800204a <_printf_i+0x1e6>
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	b005      	add	sp, #20
 8001fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fa8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001fac:	493c      	ldr	r1, [pc, #240]	; (80020a0 <_printf_i+0x23c>)
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fb6:	f100 0504 	add.w	r5, r0, #4
 8001fba:	601d      	str	r5, [r3, #0]
 8001fbc:	d001      	beq.n	8001fc2 <_printf_i+0x15e>
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	e002      	b.n	8001fc8 <_printf_i+0x164>
 8001fc2:	0655      	lsls	r5, r2, #25
 8001fc4:	d5fb      	bpl.n	8001fbe <_printf_i+0x15a>
 8001fc6:	8803      	ldrh	r3, [r0, #0]
 8001fc8:	07d0      	lsls	r0, r2, #31
 8001fca:	bf44      	itt	mi
 8001fcc:	f042 0220 	orrmi.w	r2, r2, #32
 8001fd0:	6022      	strmi	r2, [r4, #0]
 8001fd2:	b91b      	cbnz	r3, 8001fdc <_printf_i+0x178>
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	f022 0220 	bic.w	r2, r2, #32
 8001fda:	6022      	str	r2, [r4, #0]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	e7b1      	b.n	8001f44 <_printf_i+0xe0>
 8001fe0:	4675      	mov	r5, lr
 8001fe2:	fbb3 f0f2 	udiv	r0, r3, r2
 8001fe6:	fb02 3310 	mls	r3, r2, r0, r3
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d1f5      	bne.n	8001fe2 <_printf_i+0x17e>
 8001ff6:	e7b7      	b.n	8001f68 <_printf_i+0x104>
 8001ff8:	6808      	ldr	r0, [r1, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002000:	6949      	ldr	r1, [r1, #20]
 8002002:	d004      	beq.n	800200e <_printf_i+0x1aa>
 8002004:	1d10      	adds	r0, r2, #4
 8002006:	6018      	str	r0, [r3, #0]
 8002008:	6813      	ldr	r3, [r2, #0]
 800200a:	6019      	str	r1, [r3, #0]
 800200c:	e007      	b.n	800201e <_printf_i+0x1ba>
 800200e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002012:	f102 0004 	add.w	r0, r2, #4
 8002016:	6018      	str	r0, [r3, #0]
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	d0f6      	beq.n	800200a <_printf_i+0x1a6>
 800201c:	8019      	strh	r1, [r3, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	4675      	mov	r5, lr
 8002022:	6123      	str	r3, [r4, #16]
 8002024:	e7b1      	b.n	8001f8a <_printf_i+0x126>
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	1d11      	adds	r1, r2, #4
 800202a:	6019      	str	r1, [r3, #0]
 800202c:	6815      	ldr	r5, [r2, #0]
 800202e:	2100      	movs	r1, #0
 8002030:	6862      	ldr	r2, [r4, #4]
 8002032:	4628      	mov	r0, r5
 8002034:	f000 fa94 	bl	8002560 <memchr>
 8002038:	b108      	cbz	r0, 800203e <_printf_i+0x1da>
 800203a:	1b40      	subs	r0, r0, r5
 800203c:	6060      	str	r0, [r4, #4]
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	6123      	str	r3, [r4, #16]
 8002042:	2300      	movs	r3, #0
 8002044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002048:	e79f      	b.n	8001f8a <_printf_i+0x126>
 800204a:	6923      	ldr	r3, [r4, #16]
 800204c:	462a      	mov	r2, r5
 800204e:	4639      	mov	r1, r7
 8002050:	4630      	mov	r0, r6
 8002052:	47c0      	blx	r8
 8002054:	3001      	adds	r0, #1
 8002056:	d0a2      	beq.n	8001f9e <_printf_i+0x13a>
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	079b      	lsls	r3, r3, #30
 800205c:	d507      	bpl.n	800206e <_printf_i+0x20a>
 800205e:	2500      	movs	r5, #0
 8002060:	f104 0919 	add.w	r9, r4, #25
 8002064:	68e3      	ldr	r3, [r4, #12]
 8002066:	9a03      	ldr	r2, [sp, #12]
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	429d      	cmp	r5, r3
 800206c:	db05      	blt.n	800207a <_printf_i+0x216>
 800206e:	68e0      	ldr	r0, [r4, #12]
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	4298      	cmp	r0, r3
 8002074:	bfb8      	it	lt
 8002076:	4618      	movlt	r0, r3
 8002078:	e793      	b.n	8001fa2 <_printf_i+0x13e>
 800207a:	2301      	movs	r3, #1
 800207c:	464a      	mov	r2, r9
 800207e:	4639      	mov	r1, r7
 8002080:	4630      	mov	r0, r6
 8002082:	47c0      	blx	r8
 8002084:	3001      	adds	r0, #1
 8002086:	d08a      	beq.n	8001f9e <_printf_i+0x13a>
 8002088:	3501      	adds	r5, #1
 800208a:	e7eb      	b.n	8002064 <_printf_i+0x200>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1a7      	bne.n	8001fe0 <_printf_i+0x17c>
 8002090:	780b      	ldrb	r3, [r1, #0]
 8002092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002096:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800209a:	e765      	b.n	8001f68 <_printf_i+0x104>
 800209c:	08002782 	.word	0x08002782
 80020a0:	08002771 	.word	0x08002771

080020a4 <_sbrk_r>:
 80020a4:	b538      	push	{r3, r4, r5, lr}
 80020a6:	2300      	movs	r3, #0
 80020a8:	4c05      	ldr	r4, [pc, #20]	; (80020c0 <_sbrk_r+0x1c>)
 80020aa:	4605      	mov	r5, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	f7ff fb44 	bl	800173c <_sbrk>
 80020b4:	1c43      	adds	r3, r0, #1
 80020b6:	d102      	bne.n	80020be <_sbrk_r+0x1a>
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	b103      	cbz	r3, 80020be <_sbrk_r+0x1a>
 80020bc:	602b      	str	r3, [r5, #0]
 80020be:	bd38      	pop	{r3, r4, r5, pc}
 80020c0:	2000020c 	.word	0x2000020c

080020c4 <__sread>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	460c      	mov	r4, r1
 80020c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020cc:	f000 fa58 	bl	8002580 <_read_r>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	bfab      	itete	ge
 80020d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020d6:	89a3      	ldrhlt	r3, [r4, #12]
 80020d8:	181b      	addge	r3, r3, r0
 80020da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020de:	bfac      	ite	ge
 80020e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80020e2:	81a3      	strhlt	r3, [r4, #12]
 80020e4:	bd10      	pop	{r4, pc}

080020e6 <__swrite>:
 80020e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ea:	461f      	mov	r7, r3
 80020ec:	898b      	ldrh	r3, [r1, #12]
 80020ee:	4605      	mov	r5, r0
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	460c      	mov	r4, r1
 80020f4:	4616      	mov	r6, r2
 80020f6:	d505      	bpl.n	8002104 <__swrite+0x1e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	2200      	movs	r2, #0
 80020fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002100:	f000 f9b8 	bl	8002474 <_lseek_r>
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	4632      	mov	r2, r6
 8002108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800210c:	81a3      	strh	r3, [r4, #12]
 800210e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002112:	463b      	mov	r3, r7
 8002114:	4628      	mov	r0, r5
 8002116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800211a:	f000 b869 	b.w	80021f0 <_write_r>

0800211e <__sseek>:
 800211e:	b510      	push	{r4, lr}
 8002120:	460c      	mov	r4, r1
 8002122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002126:	f000 f9a5 	bl	8002474 <_lseek_r>
 800212a:	1c43      	adds	r3, r0, #1
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	bf15      	itete	ne
 8002130:	6560      	strne	r0, [r4, #84]	; 0x54
 8002132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800213a:	81a3      	strheq	r3, [r4, #12]
 800213c:	bf18      	it	ne
 800213e:	81a3      	strhne	r3, [r4, #12]
 8002140:	bd10      	pop	{r4, pc}

08002142 <__sclose>:
 8002142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002146:	f000 b8d3 	b.w	80022f0 <_close_r>
	...

0800214c <__swbuf_r>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	460e      	mov	r6, r1
 8002150:	4614      	mov	r4, r2
 8002152:	4605      	mov	r5, r0
 8002154:	b118      	cbz	r0, 800215e <__swbuf_r+0x12>
 8002156:	6983      	ldr	r3, [r0, #24]
 8002158:	b90b      	cbnz	r3, 800215e <__swbuf_r+0x12>
 800215a:	f7ff fb99 	bl	8001890 <__sinit>
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <__swbuf_r+0x98>)
 8002160:	429c      	cmp	r4, r3
 8002162:	d12a      	bne.n	80021ba <__swbuf_r+0x6e>
 8002164:	686c      	ldr	r4, [r5, #4]
 8002166:	69a3      	ldr	r3, [r4, #24]
 8002168:	60a3      	str	r3, [r4, #8]
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	071a      	lsls	r2, r3, #28
 800216e:	d52e      	bpl.n	80021ce <__swbuf_r+0x82>
 8002170:	6923      	ldr	r3, [r4, #16]
 8002172:	b363      	cbz	r3, 80021ce <__swbuf_r+0x82>
 8002174:	6923      	ldr	r3, [r4, #16]
 8002176:	6820      	ldr	r0, [r4, #0]
 8002178:	b2f6      	uxtb	r6, r6
 800217a:	1ac0      	subs	r0, r0, r3
 800217c:	6963      	ldr	r3, [r4, #20]
 800217e:	4637      	mov	r7, r6
 8002180:	4298      	cmp	r0, r3
 8002182:	db04      	blt.n	800218e <__swbuf_r+0x42>
 8002184:	4621      	mov	r1, r4
 8002186:	4628      	mov	r0, r5
 8002188:	f000 f94a 	bl	8002420 <_fflush_r>
 800218c:	bb28      	cbnz	r0, 80021da <__swbuf_r+0x8e>
 800218e:	68a3      	ldr	r3, [r4, #8]
 8002190:	3001      	adds	r0, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	60a3      	str	r3, [r4, #8]
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	6022      	str	r2, [r4, #0]
 800219c:	701e      	strb	r6, [r3, #0]
 800219e:	6963      	ldr	r3, [r4, #20]
 80021a0:	4298      	cmp	r0, r3
 80021a2:	d004      	beq.n	80021ae <__swbuf_r+0x62>
 80021a4:	89a3      	ldrh	r3, [r4, #12]
 80021a6:	07db      	lsls	r3, r3, #31
 80021a8:	d519      	bpl.n	80021de <__swbuf_r+0x92>
 80021aa:	2e0a      	cmp	r6, #10
 80021ac:	d117      	bne.n	80021de <__swbuf_r+0x92>
 80021ae:	4621      	mov	r1, r4
 80021b0:	4628      	mov	r0, r5
 80021b2:	f000 f935 	bl	8002420 <_fflush_r>
 80021b6:	b190      	cbz	r0, 80021de <__swbuf_r+0x92>
 80021b8:	e00f      	b.n	80021da <__swbuf_r+0x8e>
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <__swbuf_r+0x9c>)
 80021bc:	429c      	cmp	r4, r3
 80021be:	d101      	bne.n	80021c4 <__swbuf_r+0x78>
 80021c0:	68ac      	ldr	r4, [r5, #8]
 80021c2:	e7d0      	b.n	8002166 <__swbuf_r+0x1a>
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <__swbuf_r+0xa0>)
 80021c6:	429c      	cmp	r4, r3
 80021c8:	bf08      	it	eq
 80021ca:	68ec      	ldreq	r4, [r5, #12]
 80021cc:	e7cb      	b.n	8002166 <__swbuf_r+0x1a>
 80021ce:	4621      	mov	r1, r4
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 f81f 	bl	8002214 <__swsetup_r>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d0cc      	beq.n	8002174 <__swbuf_r+0x28>
 80021da:	f04f 37ff 	mov.w	r7, #4294967295
 80021de:	4638      	mov	r0, r7
 80021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	0800271c 	.word	0x0800271c
 80021e8:	0800273c 	.word	0x0800273c
 80021ec:	080026fc 	.word	0x080026fc

080021f0 <_write_r>:
 80021f0:	b538      	push	{r3, r4, r5, lr}
 80021f2:	4605      	mov	r5, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	4c05      	ldr	r4, [pc, #20]	; (8002210 <_write_r+0x20>)
 80021fc:	6022      	str	r2, [r4, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	f7ff fa8e 	bl	8001720 <_write>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	d102      	bne.n	800220e <_write_r+0x1e>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	b103      	cbz	r3, 800220e <_write_r+0x1e>
 800220c:	602b      	str	r3, [r5, #0]
 800220e:	bd38      	pop	{r3, r4, r5, pc}
 8002210:	2000020c 	.word	0x2000020c

08002214 <__swsetup_r>:
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <__swsetup_r+0xcc>)
 8002216:	b570      	push	{r4, r5, r6, lr}
 8002218:	681d      	ldr	r5, [r3, #0]
 800221a:	4606      	mov	r6, r0
 800221c:	460c      	mov	r4, r1
 800221e:	b125      	cbz	r5, 800222a <__swsetup_r+0x16>
 8002220:	69ab      	ldr	r3, [r5, #24]
 8002222:	b913      	cbnz	r3, 800222a <__swsetup_r+0x16>
 8002224:	4628      	mov	r0, r5
 8002226:	f7ff fb33 	bl	8001890 <__sinit>
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <__swsetup_r+0xd0>)
 800222c:	429c      	cmp	r4, r3
 800222e:	d10f      	bne.n	8002250 <__swsetup_r+0x3c>
 8002230:	686c      	ldr	r4, [r5, #4]
 8002232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002236:	b29a      	uxth	r2, r3
 8002238:	0715      	lsls	r5, r2, #28
 800223a:	d42c      	bmi.n	8002296 <__swsetup_r+0x82>
 800223c:	06d0      	lsls	r0, r2, #27
 800223e:	d411      	bmi.n	8002264 <__swsetup_r+0x50>
 8002240:	2209      	movs	r2, #9
 8002242:	6032      	str	r2, [r6, #0]
 8002244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002248:	81a3      	strh	r3, [r4, #12]
 800224a:	f04f 30ff 	mov.w	r0, #4294967295
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <__swsetup_r+0xd4>)
 8002252:	429c      	cmp	r4, r3
 8002254:	d101      	bne.n	800225a <__swsetup_r+0x46>
 8002256:	68ac      	ldr	r4, [r5, #8]
 8002258:	e7eb      	b.n	8002232 <__swsetup_r+0x1e>
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <__swsetup_r+0xd8>)
 800225c:	429c      	cmp	r4, r3
 800225e:	bf08      	it	eq
 8002260:	68ec      	ldreq	r4, [r5, #12]
 8002262:	e7e6      	b.n	8002232 <__swsetup_r+0x1e>
 8002264:	0751      	lsls	r1, r2, #29
 8002266:	d512      	bpl.n	800228e <__swsetup_r+0x7a>
 8002268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800226a:	b141      	cbz	r1, 800227e <__swsetup_r+0x6a>
 800226c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002270:	4299      	cmp	r1, r3
 8002272:	d002      	beq.n	800227a <__swsetup_r+0x66>
 8002274:	4630      	mov	r0, r6
 8002276:	f7ff fb95 	bl	80019a4 <_free_r>
 800227a:	2300      	movs	r3, #0
 800227c:	6363      	str	r3, [r4, #52]	; 0x34
 800227e:	89a3      	ldrh	r3, [r4, #12]
 8002280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002284:	81a3      	strh	r3, [r4, #12]
 8002286:	2300      	movs	r3, #0
 8002288:	6063      	str	r3, [r4, #4]
 800228a:	6923      	ldr	r3, [r4, #16]
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	89a3      	ldrh	r3, [r4, #12]
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	81a3      	strh	r3, [r4, #12]
 8002296:	6923      	ldr	r3, [r4, #16]
 8002298:	b94b      	cbnz	r3, 80022ae <__swsetup_r+0x9a>
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a4:	d003      	beq.n	80022ae <__swsetup_r+0x9a>
 80022a6:	4621      	mov	r1, r4
 80022a8:	4630      	mov	r0, r6
 80022aa:	f000 f919 	bl	80024e0 <__smakebuf_r>
 80022ae:	89a2      	ldrh	r2, [r4, #12]
 80022b0:	f012 0301 	ands.w	r3, r2, #1
 80022b4:	d00c      	beq.n	80022d0 <__swsetup_r+0xbc>
 80022b6:	2300      	movs	r3, #0
 80022b8:	60a3      	str	r3, [r4, #8]
 80022ba:	6963      	ldr	r3, [r4, #20]
 80022bc:	425b      	negs	r3, r3
 80022be:	61a3      	str	r3, [r4, #24]
 80022c0:	6923      	ldr	r3, [r4, #16]
 80022c2:	b953      	cbnz	r3, 80022da <__swsetup_r+0xc6>
 80022c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80022cc:	d1ba      	bne.n	8002244 <__swsetup_r+0x30>
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
 80022d0:	0792      	lsls	r2, r2, #30
 80022d2:	bf58      	it	pl
 80022d4:	6963      	ldrpl	r3, [r4, #20]
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	e7f2      	b.n	80022c0 <__swsetup_r+0xac>
 80022da:	2000      	movs	r0, #0
 80022dc:	e7f7      	b.n	80022ce <__swsetup_r+0xba>
 80022de:	bf00      	nop
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	0800271c 	.word	0x0800271c
 80022e8:	0800273c 	.word	0x0800273c
 80022ec:	080026fc 	.word	0x080026fc

080022f0 <_close_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	2300      	movs	r3, #0
 80022f4:	4c05      	ldr	r4, [pc, #20]	; (800230c <_close_r+0x1c>)
 80022f6:	4605      	mov	r5, r0
 80022f8:	4608      	mov	r0, r1
 80022fa:	6023      	str	r3, [r4, #0]
 80022fc:	f7ff fa38 	bl	8001770 <_close>
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	d102      	bne.n	800230a <_close_r+0x1a>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	b103      	cbz	r3, 800230a <_close_r+0x1a>
 8002308:	602b      	str	r3, [r5, #0]
 800230a:	bd38      	pop	{r3, r4, r5, pc}
 800230c:	2000020c 	.word	0x2000020c

08002310 <__sflush_r>:
 8002310:	898a      	ldrh	r2, [r1, #12]
 8002312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002316:	4605      	mov	r5, r0
 8002318:	0710      	lsls	r0, r2, #28
 800231a:	460c      	mov	r4, r1
 800231c:	d45a      	bmi.n	80023d4 <__sflush_r+0xc4>
 800231e:	684b      	ldr	r3, [r1, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	dc05      	bgt.n	8002330 <__sflush_r+0x20>
 8002324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	dc02      	bgt.n	8002330 <__sflush_r+0x20>
 800232a:	2000      	movs	r0, #0
 800232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002332:	2e00      	cmp	r6, #0
 8002334:	d0f9      	beq.n	800232a <__sflush_r+0x1a>
 8002336:	2300      	movs	r3, #0
 8002338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800233c:	682f      	ldr	r7, [r5, #0]
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	d033      	beq.n	80023aa <__sflush_r+0x9a>
 8002342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002344:	89a3      	ldrh	r3, [r4, #12]
 8002346:	075a      	lsls	r2, r3, #29
 8002348:	d505      	bpl.n	8002356 <__sflush_r+0x46>
 800234a:	6863      	ldr	r3, [r4, #4]
 800234c:	1ac0      	subs	r0, r0, r3
 800234e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002350:	b10b      	cbz	r3, 8002356 <__sflush_r+0x46>
 8002352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002354:	1ac0      	subs	r0, r0, r3
 8002356:	2300      	movs	r3, #0
 8002358:	4602      	mov	r2, r0
 800235a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800235c:	6a21      	ldr	r1, [r4, #32]
 800235e:	4628      	mov	r0, r5
 8002360:	47b0      	blx	r6
 8002362:	1c43      	adds	r3, r0, #1
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	d106      	bne.n	8002376 <__sflush_r+0x66>
 8002368:	6829      	ldr	r1, [r5, #0]
 800236a:	291d      	cmp	r1, #29
 800236c:	d84b      	bhi.n	8002406 <__sflush_r+0xf6>
 800236e:	4a2b      	ldr	r2, [pc, #172]	; (800241c <__sflush_r+0x10c>)
 8002370:	40ca      	lsrs	r2, r1
 8002372:	07d6      	lsls	r6, r2, #31
 8002374:	d547      	bpl.n	8002406 <__sflush_r+0xf6>
 8002376:	2200      	movs	r2, #0
 8002378:	6062      	str	r2, [r4, #4]
 800237a:	6922      	ldr	r2, [r4, #16]
 800237c:	04d9      	lsls	r1, r3, #19
 800237e:	6022      	str	r2, [r4, #0]
 8002380:	d504      	bpl.n	800238c <__sflush_r+0x7c>
 8002382:	1c42      	adds	r2, r0, #1
 8002384:	d101      	bne.n	800238a <__sflush_r+0x7a>
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	b903      	cbnz	r3, 800238c <__sflush_r+0x7c>
 800238a:	6560      	str	r0, [r4, #84]	; 0x54
 800238c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800238e:	602f      	str	r7, [r5, #0]
 8002390:	2900      	cmp	r1, #0
 8002392:	d0ca      	beq.n	800232a <__sflush_r+0x1a>
 8002394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002398:	4299      	cmp	r1, r3
 800239a:	d002      	beq.n	80023a2 <__sflush_r+0x92>
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff fb01 	bl	80019a4 <_free_r>
 80023a2:	2000      	movs	r0, #0
 80023a4:	6360      	str	r0, [r4, #52]	; 0x34
 80023a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023aa:	6a21      	ldr	r1, [r4, #32]
 80023ac:	2301      	movs	r3, #1
 80023ae:	4628      	mov	r0, r5
 80023b0:	47b0      	blx	r6
 80023b2:	1c41      	adds	r1, r0, #1
 80023b4:	d1c6      	bne.n	8002344 <__sflush_r+0x34>
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0c3      	beq.n	8002344 <__sflush_r+0x34>
 80023bc:	2b1d      	cmp	r3, #29
 80023be:	d001      	beq.n	80023c4 <__sflush_r+0xb4>
 80023c0:	2b16      	cmp	r3, #22
 80023c2:	d101      	bne.n	80023c8 <__sflush_r+0xb8>
 80023c4:	602f      	str	r7, [r5, #0]
 80023c6:	e7b0      	b.n	800232a <__sflush_r+0x1a>
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ce:	81a3      	strh	r3, [r4, #12]
 80023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d4:	690f      	ldr	r7, [r1, #16]
 80023d6:	2f00      	cmp	r7, #0
 80023d8:	d0a7      	beq.n	800232a <__sflush_r+0x1a>
 80023da:	0793      	lsls	r3, r2, #30
 80023dc:	bf18      	it	ne
 80023de:	2300      	movne	r3, #0
 80023e0:	680e      	ldr	r6, [r1, #0]
 80023e2:	bf08      	it	eq
 80023e4:	694b      	ldreq	r3, [r1, #20]
 80023e6:	eba6 0807 	sub.w	r8, r6, r7
 80023ea:	600f      	str	r7, [r1, #0]
 80023ec:	608b      	str	r3, [r1, #8]
 80023ee:	f1b8 0f00 	cmp.w	r8, #0
 80023f2:	dd9a      	ble.n	800232a <__sflush_r+0x1a>
 80023f4:	4643      	mov	r3, r8
 80023f6:	463a      	mov	r2, r7
 80023f8:	6a21      	ldr	r1, [r4, #32]
 80023fa:	4628      	mov	r0, r5
 80023fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023fe:	47b0      	blx	r6
 8002400:	2800      	cmp	r0, #0
 8002402:	dc07      	bgt.n	8002414 <__sflush_r+0x104>
 8002404:	89a3      	ldrh	r3, [r4, #12]
 8002406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240a:	81a3      	strh	r3, [r4, #12]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002414:	4407      	add	r7, r0
 8002416:	eba8 0800 	sub.w	r8, r8, r0
 800241a:	e7e8      	b.n	80023ee <__sflush_r+0xde>
 800241c:	20400001 	.word	0x20400001

08002420 <_fflush_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	690b      	ldr	r3, [r1, #16]
 8002424:	4605      	mov	r5, r0
 8002426:	460c      	mov	r4, r1
 8002428:	b1db      	cbz	r3, 8002462 <_fflush_r+0x42>
 800242a:	b118      	cbz	r0, 8002434 <_fflush_r+0x14>
 800242c:	6983      	ldr	r3, [r0, #24]
 800242e:	b90b      	cbnz	r3, 8002434 <_fflush_r+0x14>
 8002430:	f7ff fa2e 	bl	8001890 <__sinit>
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <_fflush_r+0x48>)
 8002436:	429c      	cmp	r4, r3
 8002438:	d109      	bne.n	800244e <_fflush_r+0x2e>
 800243a:	686c      	ldr	r4, [r5, #4]
 800243c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002440:	b17b      	cbz	r3, 8002462 <_fflush_r+0x42>
 8002442:	4621      	mov	r1, r4
 8002444:	4628      	mov	r0, r5
 8002446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800244a:	f7ff bf61 	b.w	8002310 <__sflush_r>
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_fflush_r+0x4c>)
 8002450:	429c      	cmp	r4, r3
 8002452:	d101      	bne.n	8002458 <_fflush_r+0x38>
 8002454:	68ac      	ldr	r4, [r5, #8]
 8002456:	e7f1      	b.n	800243c <_fflush_r+0x1c>
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <_fflush_r+0x50>)
 800245a:	429c      	cmp	r4, r3
 800245c:	bf08      	it	eq
 800245e:	68ec      	ldreq	r4, [r5, #12]
 8002460:	e7ec      	b.n	800243c <_fflush_r+0x1c>
 8002462:	2000      	movs	r0, #0
 8002464:	bd38      	pop	{r3, r4, r5, pc}
 8002466:	bf00      	nop
 8002468:	0800271c 	.word	0x0800271c
 800246c:	0800273c 	.word	0x0800273c
 8002470:	080026fc 	.word	0x080026fc

08002474 <_lseek_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	4605      	mov	r5, r0
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	2200      	movs	r2, #0
 800247e:	4c05      	ldr	r4, [pc, #20]	; (8002494 <_lseek_r+0x20>)
 8002480:	6022      	str	r2, [r4, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	f7ff f97e 	bl	8001784 <_lseek>
 8002488:	1c43      	adds	r3, r0, #1
 800248a:	d102      	bne.n	8002492 <_lseek_r+0x1e>
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	b103      	cbz	r3, 8002492 <_lseek_r+0x1e>
 8002490:	602b      	str	r3, [r5, #0]
 8002492:	bd38      	pop	{r3, r4, r5, pc}
 8002494:	2000020c 	.word	0x2000020c

08002498 <__swhatbuf_r>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	460e      	mov	r6, r1
 800249c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a0:	b090      	sub	sp, #64	; 0x40
 80024a2:	2900      	cmp	r1, #0
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	da07      	bge.n	80024ba <__swhatbuf_r+0x22>
 80024aa:	2300      	movs	r3, #0
 80024ac:	602b      	str	r3, [r5, #0]
 80024ae:	89b3      	ldrh	r3, [r6, #12]
 80024b0:	061a      	lsls	r2, r3, #24
 80024b2:	d410      	bmi.n	80024d6 <__swhatbuf_r+0x3e>
 80024b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b8:	e00e      	b.n	80024d8 <__swhatbuf_r+0x40>
 80024ba:	aa01      	add	r2, sp, #4
 80024bc:	f000 f872 	bl	80025a4 <_fstat_r>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	dbf2      	blt.n	80024aa <__swhatbuf_r+0x12>
 80024c4:	9a02      	ldr	r2, [sp, #8]
 80024c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024ce:	425a      	negs	r2, r3
 80024d0:	415a      	adcs	r2, r3
 80024d2:	602a      	str	r2, [r5, #0]
 80024d4:	e7ee      	b.n	80024b4 <__swhatbuf_r+0x1c>
 80024d6:	2340      	movs	r3, #64	; 0x40
 80024d8:	2000      	movs	r0, #0
 80024da:	6023      	str	r3, [r4, #0]
 80024dc:	b010      	add	sp, #64	; 0x40
 80024de:	bd70      	pop	{r4, r5, r6, pc}

080024e0 <__smakebuf_r>:
 80024e0:	898b      	ldrh	r3, [r1, #12]
 80024e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024e4:	079d      	lsls	r5, r3, #30
 80024e6:	4606      	mov	r6, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	d507      	bpl.n	80024fc <__smakebuf_r+0x1c>
 80024ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	6123      	str	r3, [r4, #16]
 80024f4:	2301      	movs	r3, #1
 80024f6:	6163      	str	r3, [r4, #20]
 80024f8:	b002      	add	sp, #8
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	ab01      	add	r3, sp, #4
 80024fe:	466a      	mov	r2, sp
 8002500:	f7ff ffca 	bl	8002498 <__swhatbuf_r>
 8002504:	9900      	ldr	r1, [sp, #0]
 8002506:	4605      	mov	r5, r0
 8002508:	4630      	mov	r0, r6
 800250a:	f7ff fa97 	bl	8001a3c <_malloc_r>
 800250e:	b948      	cbnz	r0, 8002524 <__smakebuf_r+0x44>
 8002510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002514:	059a      	lsls	r2, r3, #22
 8002516:	d4ef      	bmi.n	80024f8 <__smakebuf_r+0x18>
 8002518:	f023 0303 	bic.w	r3, r3, #3
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	e7e3      	b.n	80024ec <__smakebuf_r+0xc>
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <__smakebuf_r+0x7c>)
 8002526:	62b3      	str	r3, [r6, #40]	; 0x28
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	6020      	str	r0, [r4, #0]
 800252c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	9b00      	ldr	r3, [sp, #0]
 8002534:	6120      	str	r0, [r4, #16]
 8002536:	6163      	str	r3, [r4, #20]
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	b15b      	cbz	r3, 8002554 <__smakebuf_r+0x74>
 800253c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002540:	4630      	mov	r0, r6
 8002542:	f000 f841 	bl	80025c8 <_isatty_r>
 8002546:	b128      	cbz	r0, 8002554 <__smakebuf_r+0x74>
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	431d      	orrs	r5, r3
 8002558:	81a5      	strh	r5, [r4, #12]
 800255a:	e7cd      	b.n	80024f8 <__smakebuf_r+0x18>
 800255c:	08001811 	.word	0x08001811

08002560 <memchr>:
 8002560:	b510      	push	{r4, lr}
 8002562:	b2c9      	uxtb	r1, r1
 8002564:	4402      	add	r2, r0
 8002566:	4290      	cmp	r0, r2
 8002568:	4603      	mov	r3, r0
 800256a:	d101      	bne.n	8002570 <memchr+0x10>
 800256c:	2000      	movs	r0, #0
 800256e:	bd10      	pop	{r4, pc}
 8002570:	781c      	ldrb	r4, [r3, #0]
 8002572:	3001      	adds	r0, #1
 8002574:	428c      	cmp	r4, r1
 8002576:	d1f6      	bne.n	8002566 <memchr+0x6>
 8002578:	4618      	mov	r0, r3
 800257a:	bd10      	pop	{r4, pc}

0800257c <__malloc_lock>:
 800257c:	4770      	bx	lr

0800257e <__malloc_unlock>:
 800257e:	4770      	bx	lr

08002580 <_read_r>:
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4605      	mov	r5, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	2200      	movs	r2, #0
 800258a:	4c05      	ldr	r4, [pc, #20]	; (80025a0 <_read_r+0x20>)
 800258c:	6022      	str	r2, [r4, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	f7ff f8b8 	bl	8001704 <_read>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_read_r+0x1e>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	b103      	cbz	r3, 800259e <_read_r+0x1e>
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	2000020c 	.word	0x2000020c

080025a4 <_fstat_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	2300      	movs	r3, #0
 80025a8:	4c06      	ldr	r4, [pc, #24]	; (80025c4 <_fstat_r+0x20>)
 80025aa:	4605      	mov	r5, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	6023      	str	r3, [r4, #0]
 80025b2:	f7ff f8e0 	bl	8001776 <_fstat>
 80025b6:	1c43      	adds	r3, r0, #1
 80025b8:	d102      	bne.n	80025c0 <_fstat_r+0x1c>
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	b103      	cbz	r3, 80025c0 <_fstat_r+0x1c>
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
 80025c2:	bf00      	nop
 80025c4:	2000020c 	.word	0x2000020c

080025c8 <_isatty_r>:
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	2300      	movs	r3, #0
 80025cc:	4c05      	ldr	r4, [pc, #20]	; (80025e4 <_isatty_r+0x1c>)
 80025ce:	4605      	mov	r5, r0
 80025d0:	4608      	mov	r0, r1
 80025d2:	6023      	str	r3, [r4, #0]
 80025d4:	f7ff f8d4 	bl	8001780 <_isatty>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d102      	bne.n	80025e2 <_isatty_r+0x1a>
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	b103      	cbz	r3, 80025e2 <_isatty_r+0x1a>
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	2000020c 	.word	0x2000020c

080025e8 <_init>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr

080025f4 <_fini>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr
